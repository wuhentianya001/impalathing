// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package beeswax

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/wuhentianya001/impalathing/services/hive_metastore"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = hive_metastore.GoUnusedProtection__
var GoUnusedProtection__ int

type QueryState int64

const (
	QueryState_CREATED     QueryState = 0
	QueryState_INITIALIZED QueryState = 1
	QueryState_COMPILED    QueryState = 2
	QueryState_RUNNING     QueryState = 3
	QueryState_FINISHED    QueryState = 4
	QueryState_EXCEPTION   QueryState = 5
)

func (p QueryState) String() string {
	switch p {
	case QueryState_CREATED:
		return "CREATED"
	case QueryState_INITIALIZED:
		return "INITIALIZED"
	case QueryState_COMPILED:
		return "COMPILED"
	case QueryState_RUNNING:
		return "RUNNING"
	case QueryState_FINISHED:
		return "FINISHED"
	case QueryState_EXCEPTION:
		return "EXCEPTION"
	}
	return "<UNSET>"
}

func QueryStateFromString(s string) (QueryState, error) {
	switch s {
	case "CREATED":
		return QueryState_CREATED, nil
	case "INITIALIZED":
		return QueryState_INITIALIZED, nil
	case "COMPILED":
		return QueryState_COMPILED, nil
	case "RUNNING":
		return QueryState_RUNNING, nil
	case "FINISHED":
		return QueryState_FINISHED, nil
	case "EXCEPTION":
		return QueryState_EXCEPTION, nil
	}
	return QueryState(0), fmt.Errorf("not a valid QueryState string")
}

func QueryStatePtr(v QueryState) *QueryState { return &v }

func (p QueryState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *QueryState) UnmarshalText(text []byte) error {
	q, err := QueryStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type LogContextId string

func LogContextIdPtr(v LogContextId) *LogContextId { return &v }

// Attributes:
//  - Query
//  - Configuration
//  - HadoopUser
type Query struct {
	Query string `thrift:"query,1" json:"query"`
	// unused field # 2
	Configuration []string `thrift:"configuration,3" json:"configuration"`
	HadoopUser    string   `thrift:"hadoop_user,4" json:"hadoop_user"`
}

func NewQuery() *Query {
	return &Query{}
}

func (p *Query) GetQuery() string {
	return p.Query
}

func (p *Query) GetConfiguration() []string {
	return p.Configuration
}

func (p *Query) GetHadoopUser() string {
	return p.HadoopUser
}
func (p *Query) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Query) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *Query) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Configuration = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Configuration = append(p.Configuration, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Query) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HadoopUser = v
	}
	return nil
}

func (p *Query) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Query"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Query) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *Query) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("configuration", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:configuration: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Configuration)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Configuration {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:configuration: ", p), err)
	}
	return err
}

func (p *Query) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hadoop_user", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hadoop_user: ", p), err)
	}
	if err := oprot.WriteString(string(p.HadoopUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hadoop_user (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hadoop_user: ", p), err)
	}
	return err
}

func (p *Query) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Query(%+v)", *p)
}

// Attributes:
//  - ID
//  - LogContext
type QueryHandle struct {
	ID         string       `thrift:"id,1" json:"id"`
	LogContext LogContextId `thrift:"log_context,2" json:"log_context"`
}

func NewQueryHandle() *QueryHandle {
	return &QueryHandle{}
}

func (p *QueryHandle) GetID() string {
	return p.ID
}

func (p *QueryHandle) GetLogContext() LogContextId {
	return p.LogContext
}
func (p *QueryHandle) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryHandle) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *QueryHandle) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LogContextId(v)
		p.LogContext = temp
	}
	return nil
}

func (p *QueryHandle) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryHandle"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryHandle) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *QueryHandle) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_context", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_context: ", p), err)
	}
	if err := oprot.WriteString(string(p.LogContext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_context (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_context: ", p), err)
	}
	return err
}

func (p *QueryHandle) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryHandle(%+v)", *p)
}

// Attributes:
//  - Textual
type QueryExplanation struct {
	Textual string `thrift:"textual,1" json:"textual"`
}

func NewQueryExplanation() *QueryExplanation {
	return &QueryExplanation{}
}

func (p *QueryExplanation) GetTextual() string {
	return p.Textual
}
func (p *QueryExplanation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryExplanation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Textual = v
	}
	return nil
}

func (p *QueryExplanation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryExplanation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryExplanation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("textual", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:textual: ", p), err)
	}
	if err := oprot.WriteString(string(p.Textual)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.textual (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:textual: ", p), err)
	}
	return err
}

func (p *QueryExplanation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryExplanation(%+v)", *p)
}

// Attributes:
//  - Ready
//  - Columns
//  - Data
//  - StartRow
//  - HasMore
type Results struct {
	Ready    bool     `thrift:"ready,1" json:"ready"`
	Columns  []string `thrift:"columns,2" json:"columns"`
	Data     []string `thrift:"data,3" json:"data"`
	StartRow int64    `thrift:"start_row,4" json:"start_row"`
	HasMore  bool     `thrift:"has_more,5" json:"has_more"`
}

func NewResults() *Results {
	return &Results{}
}

func (p *Results) GetReady() bool {
	return p.Ready
}

func (p *Results) GetColumns() []string {
	return p.Columns
}

func (p *Results) GetData() []string {
	return p.Data
}

func (p *Results) GetStartRow() int64 {
	return p.StartRow
}

func (p *Results) GetHasMore() bool {
	return p.HasMore
}
func (p *Results) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Results) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ready = v
	}
	return nil
}

func (p *Results) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Columns = append(p.Columns, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Results) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Data = append(p.Data, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Results) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *Results) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.HasMore = v
	}
	return nil
}

func (p *Results) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Results"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Results) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ready", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ready: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Ready)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ready (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ready: ", p), err)
	}
	return err
}

func (p *Results) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err)
	}
	return err
}

func (p *Results) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *Results) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_row", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_row: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartRow)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_row (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_row: ", p), err)
	}
	return err
}

func (p *Results) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("has_more", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:has_more: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasMore)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.has_more (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:has_more: ", p), err)
	}
	return err
}

func (p *Results) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Results(%+v)", *p)
}

// Metadata information about the results.
// Applicable only for SELECT.
//
// Attributes:
//  - Schema: The schema of the results
//  - TableDir: The directory containing the results. Not applicable for partition table.
//  - InTablename: If the results are straight from an existing table, the table name.
//  - Delim: Field delimiter
type ResultsMetadata struct {
	Schema      *hive_metastore.Schema `thrift:"schema,1" json:"schema"`
	TableDir    string                 `thrift:"table_dir,2" json:"table_dir"`
	InTablename string                 `thrift:"in_tablename,3" json:"in_tablename"`
	Delim       string                 `thrift:"delim,4" json:"delim"`
}

func NewResultsMetadata() *ResultsMetadata {
	return &ResultsMetadata{}
}

var ResultsMetadata_Schema_DEFAULT *hive_metastore.Schema

func (p *ResultsMetadata) GetSchema() *hive_metastore.Schema {
	if !p.IsSetSchema() {
		return ResultsMetadata_Schema_DEFAULT
	}
	return p.Schema
}

func (p *ResultsMetadata) GetTableDir() string {
	return p.TableDir
}

func (p *ResultsMetadata) GetInTablename() string {
	return p.InTablename
}

func (p *ResultsMetadata) GetDelim() string {
	return p.Delim
}
func (p *ResultsMetadata) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *ResultsMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResultsMetadata) readField1(iprot thrift.TProtocol) error {
	p.Schema = &hive_metastore.Schema{}
	if err := p.Schema.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
	}
	return nil
}

func (p *ResultsMetadata) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableDir = v
	}
	return nil
}

func (p *ResultsMetadata) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InTablename = v
	}
	return nil
}

func (p *ResultsMetadata) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Delim = v
	}
	return nil
}

func (p *ResultsMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultsMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultsMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schema: ", p), err)
	}
	if err := p.Schema.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schema: ", p), err)
	}
	return err
}

func (p *ResultsMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_dir", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_dir: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_dir (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_dir: ", p), err)
	}
	return err
}

func (p *ResultsMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("in_tablename", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:in_tablename: ", p), err)
	}
	if err := oprot.WriteString(string(p.InTablename)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.in_tablename (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:in_tablename: ", p), err)
	}
	return err
}

func (p *ResultsMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delim", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delim: ", p), err)
	}
	if err := oprot.WriteString(string(p.Delim)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delim (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delim: ", p), err)
	}
	return err
}

func (p *ResultsMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultsMetadata(%+v)", *p)
}

// Attributes:
//  - Message
//  - LogContext
//  - Handle
//  - ErrorCode
//  - SQLState
type BeeswaxException struct {
	Message    string       `thrift:"message,1" json:"message"`
	LogContext LogContextId `thrift:"log_context,2" json:"log_context"`
	Handle     *QueryHandle `thrift:"handle,3" json:"handle"`
	ErrorCode  int32        `thrift:"errorCode,4" json:"errorCode,omitempty"`
	SQLState   string       `thrift:"SQLState,5" json:"SQLState,omitempty"`
}

func NewBeeswaxException() *BeeswaxException {
	return &BeeswaxException{
		SQLState: "     ",
	}
}

func (p *BeeswaxException) GetMessage() string {
	return p.Message
}

func (p *BeeswaxException) GetLogContext() LogContextId {
	return p.LogContext
}

var BeeswaxException_Handle_DEFAULT *QueryHandle

func (p *BeeswaxException) GetHandle() *QueryHandle {
	if !p.IsSetHandle() {
		return BeeswaxException_Handle_DEFAULT
	}
	return p.Handle
}

var BeeswaxException_ErrorCode_DEFAULT int32 = 0

func (p *BeeswaxException) GetErrorCode() int32 {
	return p.ErrorCode
}

var BeeswaxException_SQLState_DEFAULT string = "     "

func (p *BeeswaxException) GetSQLState() string {
	return p.SQLState
}
func (p *BeeswaxException) IsSetHandle() bool {
	return p.Handle != nil
}

func (p *BeeswaxException) IsSetErrorCode() bool {
	return p.ErrorCode != BeeswaxException_ErrorCode_DEFAULT
}

func (p *BeeswaxException) IsSetSQLState() bool {
	return p.SQLState != BeeswaxException_SQLState_DEFAULT
}

func (p *BeeswaxException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *BeeswaxException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LogContextId(v)
		p.LogContext = temp
	}
	return nil
}

func (p *BeeswaxException) readField3(iprot thrift.TProtocol) error {
	p.Handle = &QueryHandle{}
	if err := p.Handle.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
	}
	return nil
}

func (p *BeeswaxException) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *BeeswaxException) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SQLState = v
	}
	return nil
}

func (p *BeeswaxException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BeeswaxException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *BeeswaxException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_context", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_context: ", p), err)
	}
	if err := oprot.WriteString(string(p.LogContext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_context (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_context: ", p), err)
	}
	return err
}

func (p *BeeswaxException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:handle: ", p), err)
	}
	if err := p.Handle.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:handle: ", p), err)
	}
	return err
}

func (p *BeeswaxException) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errorCode (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorCode: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxException) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSQLState() {
		if err := oprot.WriteFieldBegin("SQLState", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SQLState: ", p), err)
		}
		if err := oprot.WriteString(string(p.SQLState)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SQLState (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SQLState: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxException(%+v)", *p)
}

func (p *BeeswaxException) Error() string {
	return p.String()
}

type QueryNotFoundException struct {
}

func NewQueryNotFoundException() *QueryNotFoundException {
	return &QueryNotFoundException{}
}

func (p *QueryNotFoundException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryNotFoundException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryNotFoundException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryNotFoundException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryNotFoundException(%+v)", *p)
}

func (p *QueryNotFoundException) Error() string {
	return p.String()
}

// Represents a Hadoop-style configuration variable.
//
// Attributes:
//  - Key
//  - Value
//  - Description
type ConfigVariable struct {
	Key         string `thrift:"key,1" json:"key"`
	Value       string `thrift:"value,2" json:"value"`
	Description string `thrift:"description,3" json:"description"`
}

func NewConfigVariable() *ConfigVariable {
	return &ConfigVariable{}
}

func (p *ConfigVariable) GetKey() string {
	return p.Key
}

func (p *ConfigVariable) GetValue() string {
	return p.Value
}

func (p *ConfigVariable) GetDescription() string {
	return p.Description
}
func (p *ConfigVariable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigVariable) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *ConfigVariable) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *ConfigVariable) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *ConfigVariable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfigVariable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigVariable) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *ConfigVariable) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *ConfigVariable) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *ConfigVariable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigVariable(%+v)", *p)
}
