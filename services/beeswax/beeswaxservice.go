// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package beeswax

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/wuhentianya001/impalathing/services/hive_metastore"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = hive_metastore.GoUnusedProtection__

type BeeswaxService interface {
	// Submit a query and return a handle (QueryHandle). The query runs asynchronously.
	//
	// Parameters:
	//  - Query
	Query(query *Query) (r *QueryHandle, err error)
	// run a query synchronously and return a handle (QueryHandle).
	//
	// Parameters:
	//  - Query
	//  - ClientCtx
	ExecuteAndWait(query *Query, clientCtx LogContextId) (r *QueryHandle, err error)
	// Get the query plan for a query.
	//
	// Parameters:
	//  - Query
	Explain(query *Query) (r *QueryExplanation, err error)
	// Get the results of a query. This is non-blocking. Caller should check
	// Results.ready to determine if the results are in yet. The call requests
	// the batch size of fetch.
	//
	// Parameters:
	//  - QueryID
	//  - StartOver
	//  - FetchSize
	Fetch(query_id *QueryHandle, start_over bool, fetch_size int32) (r *Results, err error)
	// Get the state of the query
	//
	// Parameters:
	//  - Handle
	GetState(handle *QueryHandle) (r QueryState, err error)
	// Get the result metadata
	//
	// Parameters:
	//  - Handle
	GetResultsMetadata(handle *QueryHandle) (r *ResultsMetadata, err error)
	// Used to test connection to server.  A "noop" command.
	//
	// Parameters:
	//  - S
	Echo(s string) (r string, err error)
	// Returns a string representation of the configuration object being used.
	// Handy for debugging.
	DumpConfig() (r string, err error)
	// Get the log messages related to the given context.
	//
	// Parameters:
	//  - Context
	GetLog(context LogContextId) (r string, err error)
	// Parameters:
	//  - IncludeHadoop
	GetDefaultConfiguration(include_hadoop bool) (r []*ConfigVariable, err error)
	// Parameters:
	//  - Handle
	Close(handle *QueryHandle) (err error)
	// Parameters:
	//  - LogContext
	Clean(log_context LogContextId) (err error)
}

type BeeswaxServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBeeswaxServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BeeswaxServiceClient {
	return &BeeswaxServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBeeswaxServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BeeswaxServiceClient {
	return &BeeswaxServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Submit a query and return a handle (QueryHandle). The query runs asynchronously.
//
// Parameters:
//  - Query
func (p *BeeswaxServiceClient) Query(query *Query) (r *QueryHandle, err error) {
	if err = p.sendQuery(query); err != nil {
		return
	}
	return p.recvQuery()
}

func (p *BeeswaxServiceClient) sendQuery(query *Query) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("query", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceQueryArgs{
		Query: query,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvQuery() (value *QueryHandle, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "query" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "query failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "query failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "query failed: invalid message type")
		return
	}
	result := BeeswaxServiceQueryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// run a query synchronously and return a handle (QueryHandle).
//
// Parameters:
//  - Query
//  - ClientCtx
func (p *BeeswaxServiceClient) ExecuteAndWait(query *Query, clientCtx LogContextId) (r *QueryHandle, err error) {
	if err = p.sendExecuteAndWait(query, clientCtx); err != nil {
		return
	}
	return p.recvExecuteAndWait()
}

func (p *BeeswaxServiceClient) sendExecuteAndWait(query *Query, clientCtx LogContextId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("executeAndWait", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceExecuteAndWaitArgs{
		Query:     query,
		ClientCtx: clientCtx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvExecuteAndWait() (value *QueryHandle, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "executeAndWait" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "executeAndWait failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "executeAndWait failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "executeAndWait failed: invalid message type")
		return
	}
	result := BeeswaxServiceExecuteAndWaitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Get the query plan for a query.
//
// Parameters:
//  - Query
func (p *BeeswaxServiceClient) Explain(query *Query) (r *QueryExplanation, err error) {
	if err = p.sendExplain(query); err != nil {
		return
	}
	return p.recvExplain()
}

func (p *BeeswaxServiceClient) sendExplain(query *Query) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("explain", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceExplainArgs{
		Query: query,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvExplain() (value *QueryExplanation, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "explain" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "explain failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "explain failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "explain failed: invalid message type")
		return
	}
	result := BeeswaxServiceExplainResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Get the results of a query. This is non-blocking. Caller should check
// Results.ready to determine if the results are in yet. The call requests
// the batch size of fetch.
//
// Parameters:
//  - QueryID
//  - StartOver
//  - FetchSize
func (p *BeeswaxServiceClient) Fetch(query_id *QueryHandle, start_over bool, fetch_size int32) (r *Results, err error) {
	if err = p.sendFetch(query_id, start_over, fetch_size); err != nil {
		return
	}
	return p.recvFetch()
}

func (p *BeeswaxServiceClient) sendFetch(query_id *QueryHandle, start_over bool, fetch_size int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceFetchArgs{
		QueryID:   query_id,
		StartOver: start_over,
		FetchSize: fetch_size,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvFetch() (value *Results, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "fetch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetch failed: invalid message type")
		return
	}
	result := BeeswaxServiceFetchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	}
	value = result.GetSuccess()
	return
}

// Get the state of the query
//
// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) GetState(handle *QueryHandle) (r QueryState, err error) {
	if err = p.sendGetState(handle); err != nil {
		return
	}
	return p.recvGetState()
}

func (p *BeeswaxServiceClient) sendGetState(handle *QueryHandle) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_state", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceGetStateArgs{
		Handle: handle,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvGetState() (value QueryState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_state" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_state failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_state failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_state failed: invalid message type")
		return
	}
	result := BeeswaxServiceGetStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Get the result metadata
//
// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) GetResultsMetadata(handle *QueryHandle) (r *ResultsMetadata, err error) {
	if err = p.sendGetResultsMetadata(handle); err != nil {
		return
	}
	return p.recvGetResultsMetadata()
}

func (p *BeeswaxServiceClient) sendGetResultsMetadata(handle *QueryHandle) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_results_metadata", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceGetResultsMetadataArgs{
		Handle: handle,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvGetResultsMetadata() (value *ResultsMetadata, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_results_metadata" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_results_metadata failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_results_metadata failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_results_metadata failed: invalid message type")
		return
	}
	result := BeeswaxServiceGetResultsMetadataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Used to test connection to server.  A "noop" command.
//
// Parameters:
//  - S
func (p *BeeswaxServiceClient) Echo(s string) (r string, err error) {
	if err = p.sendEcho(s); err != nil {
		return
	}
	return p.recvEcho()
}

func (p *BeeswaxServiceClient) sendEcho(s string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("echo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceEchoArgs{
		S: s,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvEcho() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "echo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "echo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "echo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "echo failed: invalid message type")
		return
	}
	result := BeeswaxServiceEchoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a string representation of the configuration object being used.
// Handy for debugging.
func (p *BeeswaxServiceClient) DumpConfig() (r string, err error) {
	if err = p.sendDumpConfig(); err != nil {
		return
	}
	return p.recvDumpConfig()
}

func (p *BeeswaxServiceClient) sendDumpConfig() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("dump_config", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceDumpConfigArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvDumpConfig() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "dump_config" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "dump_config failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "dump_config failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dump_config failed: invalid message type")
		return
	}
	result := BeeswaxServiceDumpConfigResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Get the log messages related to the given context.
//
// Parameters:
//  - Context
func (p *BeeswaxServiceClient) GetLog(context LogContextId) (r string, err error) {
	if err = p.sendGetLog(context); err != nil {
		return
	}
	return p.recvGetLog()
}

func (p *BeeswaxServiceClient) sendGetLog(context LogContextId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_log", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceGetLogArgs{
		Context: context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvGetLog() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_log" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_log failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_log failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_log failed: invalid message type")
		return
	}
	result := BeeswaxServiceGetLogResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - IncludeHadoop
func (p *BeeswaxServiceClient) GetDefaultConfiguration(include_hadoop bool) (r []*ConfigVariable, err error) {
	if err = p.sendGetDefaultConfiguration(include_hadoop); err != nil {
		return
	}
	return p.recvGetDefaultConfiguration()
}

func (p *BeeswaxServiceClient) sendGetDefaultConfiguration(include_hadoop bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_default_configuration", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceGetDefaultConfigurationArgs{
		IncludeHadoop: include_hadoop,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvGetDefaultConfiguration() (value []*ConfigVariable, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_default_configuration" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_default_configuration failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_default_configuration failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_default_configuration failed: invalid message type")
		return
	}
	result := BeeswaxServiceGetDefaultConfigurationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) Close(handle *QueryHandle) (err error) {
	if err = p.sendClose(handle); err != nil {
		return
	}
	return p.recvClose()
}

func (p *BeeswaxServiceClient) sendClose(handle *QueryHandle) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("close", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceCloseArgs{
		Handle: handle,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvClose() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "close" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "close failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "close failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "close failed: invalid message type")
		return
	}
	result := BeeswaxServiceCloseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Error != nil {
		err = result.Error
		return
	} else if result.Error2 != nil {
		err = result.Error2
		return
	}
	return
}

// Parameters:
//  - LogContext
func (p *BeeswaxServiceClient) Clean(log_context LogContextId) (err error) {
	if err = p.sendClean(log_context); err != nil {
		return
	}
	return p.recvClean()
}

func (p *BeeswaxServiceClient) sendClean(log_context LogContextId) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clean", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BeeswaxServiceCleanArgs{
		LogContext: log_context,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BeeswaxServiceClient) recvClean() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clean" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clean failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clean failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clean failed: invalid message type")
		return
	}
	result := BeeswaxServiceCleanResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

type BeeswaxServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BeeswaxService
}

func (p *BeeswaxServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BeeswaxServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BeeswaxServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBeeswaxServiceProcessor(handler BeeswaxService) *BeeswaxServiceProcessor {

	self27 := &BeeswaxServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self27.processorMap["query"] = &beeswaxServiceProcessorQuery{handler: handler}
	self27.processorMap["executeAndWait"] = &beeswaxServiceProcessorExecuteAndWait{handler: handler}
	self27.processorMap["explain"] = &beeswaxServiceProcessorExplain{handler: handler}
	self27.processorMap["fetch"] = &beeswaxServiceProcessorFetch{handler: handler}
	self27.processorMap["get_state"] = &beeswaxServiceProcessorGetState{handler: handler}
	self27.processorMap["get_results_metadata"] = &beeswaxServiceProcessorGetResultsMetadata{handler: handler}
	self27.processorMap["echo"] = &beeswaxServiceProcessorEcho{handler: handler}
	self27.processorMap["dump_config"] = &beeswaxServiceProcessorDumpConfig{handler: handler}
	self27.processorMap["get_log"] = &beeswaxServiceProcessorGetLog{handler: handler}
	self27.processorMap["get_default_configuration"] = &beeswaxServiceProcessorGetDefaultConfiguration{handler: handler}
	self27.processorMap["close"] = &beeswaxServiceProcessorClose{handler: handler}
	self27.processorMap["clean"] = &beeswaxServiceProcessorClean{handler: handler}
	return self27
}

func (p *BeeswaxServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x28 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x28.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x28

}

type beeswaxServiceProcessorQuery struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceQueryResult{}
	var retval *QueryHandle
	var err2 error
	if retval, err2 = p.handler.Query(args.Query); err2 != nil {
		switch v := err2.(type) {
		case *BeeswaxException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query: "+err2.Error())
			oprot.WriteMessageBegin("query", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorExecuteAndWait struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorExecuteAndWait) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceExecuteAndWaitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("executeAndWait", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceExecuteAndWaitResult{}
	var retval *QueryHandle
	var err2 error
	if retval, err2 = p.handler.ExecuteAndWait(args.Query, args.ClientCtx); err2 != nil {
		switch v := err2.(type) {
		case *BeeswaxException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeAndWait: "+err2.Error())
			oprot.WriteMessageBegin("executeAndWait", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("executeAndWait", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorExplain struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorExplain) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceExplainArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("explain", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceExplainResult{}
	var retval *QueryExplanation
	var err2 error
	if retval, err2 = p.handler.Explain(args.Query); err2 != nil {
		switch v := err2.(type) {
		case *BeeswaxException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing explain: "+err2.Error())
			oprot.WriteMessageBegin("explain", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("explain", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorFetch struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorFetch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceFetchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceFetchResult{}
	var retval *Results
	var err2 error
	if retval, err2 = p.handler.Fetch(args.QueryID, args.StartOver, args.FetchSize); err2 != nil {
		switch v := err2.(type) {
		case *QueryNotFoundException:
			result.Error = v
		case *BeeswaxException:
			result.Error2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetch: "+err2.Error())
			oprot.WriteMessageBegin("fetch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorGetState struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceGetStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_state", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceGetStateResult{}
	var retval QueryState
	var err2 error
	if retval, err2 = p.handler.GetState(args.Handle); err2 != nil {
		switch v := err2.(type) {
		case *QueryNotFoundException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_state: "+err2.Error())
			oprot.WriteMessageBegin("get_state", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_state", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorGetResultsMetadata struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetResultsMetadata) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceGetResultsMetadataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_results_metadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceGetResultsMetadataResult{}
	var retval *ResultsMetadata
	var err2 error
	if retval, err2 = p.handler.GetResultsMetadata(args.Handle); err2 != nil {
		switch v := err2.(type) {
		case *QueryNotFoundException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_results_metadata: "+err2.Error())
			oprot.WriteMessageBegin("get_results_metadata", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_results_metadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorEcho struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorEcho) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceEchoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceEchoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Echo(args.S); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: "+err2.Error())
		oprot.WriteMessageBegin("echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("echo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorDumpConfig struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorDumpConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceDumpConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dump_config", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceDumpConfigResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DumpConfig(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dump_config: "+err2.Error())
		oprot.WriteMessageBegin("dump_config", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("dump_config", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorGetLog struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetLog) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceGetLogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceGetLogResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetLog(args.Context); err2 != nil {
		switch v := err2.(type) {
		case *QueryNotFoundException:
			result.Error = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_log: "+err2.Error())
			oprot.WriteMessageBegin("get_log", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorGetDefaultConfiguration struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetDefaultConfiguration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceGetDefaultConfigurationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_default_configuration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceGetDefaultConfigurationResult{}
	var retval []*ConfigVariable
	var err2 error
	if retval, err2 = p.handler.GetDefaultConfiguration(args.IncludeHadoop); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_default_configuration: "+err2.Error())
		oprot.WriteMessageBegin("get_default_configuration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_default_configuration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorClose struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorClose) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceCloseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("close", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceCloseResult{}
	var err2 error
	if err2 = p.handler.Close(args.Handle); err2 != nil {
		switch v := err2.(type) {
		case *QueryNotFoundException:
			result.Error = v
		case *BeeswaxException:
			result.Error2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing close: "+err2.Error())
			oprot.WriteMessageBegin("close", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("close", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type beeswaxServiceProcessorClean struct {
	handler BeeswaxService
}

func (p *beeswaxServiceProcessorClean) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BeeswaxServiceCleanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BeeswaxServiceCleanResult{}
	var err2 error
	if err2 = p.handler.Clean(args.LogContext); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: "+err2.Error())
		oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("clean", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type BeeswaxServiceQueryArgs struct {
	Query *Query `thrift:"query,1" json:"query"`
}

func NewBeeswaxServiceQueryArgs() *BeeswaxServiceQueryArgs {
	return &BeeswaxServiceQueryArgs{}
}

var BeeswaxServiceQueryArgs_Query_DEFAULT *Query

func (p *BeeswaxServiceQueryArgs) GetQuery() *Query {
	if !p.IsSetQuery() {
		return BeeswaxServiceQueryArgs_Query_DEFAULT
	}
	return p.Query
}
func (p *BeeswaxServiceQueryArgs) IsSetQuery() bool {
	return p.Query != nil
}

func (p *BeeswaxServiceQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceQueryArgs) readField1(iprot thrift.TProtocol) error {
	p.Query = &Query{}
	if err := p.Query.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
	}
	return nil
}

func (p *BeeswaxServiceQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := p.Query.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceQueryResult struct {
	Success *QueryHandle      `thrift:"success,0" json:"success,omitempty"`
	Error   *BeeswaxException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceQueryResult() *BeeswaxServiceQueryResult {
	return &BeeswaxServiceQueryResult{}
}

var BeeswaxServiceQueryResult_Success_DEFAULT *QueryHandle

func (p *BeeswaxServiceQueryResult) GetSuccess() *QueryHandle {
	if !p.IsSetSuccess() {
		return BeeswaxServiceQueryResult_Success_DEFAULT
	}
	return p.Success
}

var BeeswaxServiceQueryResult_Error_DEFAULT *BeeswaxException

func (p *BeeswaxServiceQueryResult) GetError() *BeeswaxException {
	if !p.IsSetError() {
		return BeeswaxServiceQueryResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceQueryResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceQueryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &QueryHandle{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BeeswaxServiceQueryResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &BeeswaxException{
		SQLState: "     ",
	}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceQueryResult(%+v)", *p)
}

// Attributes:
//  - Query
//  - ClientCtx
type BeeswaxServiceExecuteAndWaitArgs struct {
	Query     *Query       `thrift:"query,1" json:"query"`
	ClientCtx LogContextId `thrift:"clientCtx,2" json:"clientCtx"`
}

func NewBeeswaxServiceExecuteAndWaitArgs() *BeeswaxServiceExecuteAndWaitArgs {
	return &BeeswaxServiceExecuteAndWaitArgs{}
}

var BeeswaxServiceExecuteAndWaitArgs_Query_DEFAULT *Query

func (p *BeeswaxServiceExecuteAndWaitArgs) GetQuery() *Query {
	if !p.IsSetQuery() {
		return BeeswaxServiceExecuteAndWaitArgs_Query_DEFAULT
	}
	return p.Query
}

func (p *BeeswaxServiceExecuteAndWaitArgs) GetClientCtx() LogContextId {
	return p.ClientCtx
}
func (p *BeeswaxServiceExecuteAndWaitArgs) IsSetQuery() bool {
	return p.Query != nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) readField1(iprot thrift.TProtocol) error {
	p.Query = &Query{}
	if err := p.Query.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LogContextId(v)
		p.ClientCtx = temp
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeAndWait_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := p.Query.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceExecuteAndWaitArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientCtx", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientCtx: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientCtx)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientCtx (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientCtx: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceExecuteAndWaitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceExecuteAndWaitArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceExecuteAndWaitResult struct {
	Success *QueryHandle      `thrift:"success,0" json:"success,omitempty"`
	Error   *BeeswaxException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceExecuteAndWaitResult() *BeeswaxServiceExecuteAndWaitResult {
	return &BeeswaxServiceExecuteAndWaitResult{}
}

var BeeswaxServiceExecuteAndWaitResult_Success_DEFAULT *QueryHandle

func (p *BeeswaxServiceExecuteAndWaitResult) GetSuccess() *QueryHandle {
	if !p.IsSetSuccess() {
		return BeeswaxServiceExecuteAndWaitResult_Success_DEFAULT
	}
	return p.Success
}

var BeeswaxServiceExecuteAndWaitResult_Error_DEFAULT *BeeswaxException

func (p *BeeswaxServiceExecuteAndWaitResult) GetError() *BeeswaxException {
	if !p.IsSetError() {
		return BeeswaxServiceExecuteAndWaitResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceExecuteAndWaitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &QueryHandle{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &BeeswaxException{
		SQLState: "     ",
	}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeAndWait_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceExecuteAndWaitResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceExecuteAndWaitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceExecuteAndWaitResult(%+v)", *p)
}

// Attributes:
//  - Query
type BeeswaxServiceExplainArgs struct {
	Query *Query `thrift:"query,1" json:"query"`
}

func NewBeeswaxServiceExplainArgs() *BeeswaxServiceExplainArgs {
	return &BeeswaxServiceExplainArgs{}
}

var BeeswaxServiceExplainArgs_Query_DEFAULT *Query

func (p *BeeswaxServiceExplainArgs) GetQuery() *Query {
	if !p.IsSetQuery() {
		return BeeswaxServiceExplainArgs_Query_DEFAULT
	}
	return p.Query
}
func (p *BeeswaxServiceExplainArgs) IsSetQuery() bool {
	return p.Query != nil
}

func (p *BeeswaxServiceExplainArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceExplainArgs) readField1(iprot thrift.TProtocol) error {
	p.Query = &Query{}
	if err := p.Query.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
	}
	return nil
}

func (p *BeeswaxServiceExplainArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("explain_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceExplainArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := p.Query.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceExplainArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceExplainArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceExplainResult struct {
	Success *QueryExplanation `thrift:"success,0" json:"success,omitempty"`
	Error   *BeeswaxException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceExplainResult() *BeeswaxServiceExplainResult {
	return &BeeswaxServiceExplainResult{}
}

var BeeswaxServiceExplainResult_Success_DEFAULT *QueryExplanation

func (p *BeeswaxServiceExplainResult) GetSuccess() *QueryExplanation {
	if !p.IsSetSuccess() {
		return BeeswaxServiceExplainResult_Success_DEFAULT
	}
	return p.Success
}

var BeeswaxServiceExplainResult_Error_DEFAULT *BeeswaxException

func (p *BeeswaxServiceExplainResult) GetError() *BeeswaxException {
	if !p.IsSetError() {
		return BeeswaxServiceExplainResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceExplainResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceExplainResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceExplainResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceExplainResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &QueryExplanation{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BeeswaxServiceExplainResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &BeeswaxException{
		SQLState: "     ",
	}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceExplainResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("explain_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceExplainResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceExplainResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceExplainResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceExplainResult(%+v)", *p)
}

// Attributes:
//  - QueryID
//  - StartOver
//  - FetchSize
type BeeswaxServiceFetchArgs struct {
	QueryID   *QueryHandle `thrift:"query_id,1" json:"query_id"`
	StartOver bool         `thrift:"start_over,2" json:"start_over"`
	FetchSize int32        `thrift:"fetch_size,3" json:"fetch_size"`
}

func NewBeeswaxServiceFetchArgs() *BeeswaxServiceFetchArgs {
	return &BeeswaxServiceFetchArgs{
		FetchSize: -1,
	}
}

var BeeswaxServiceFetchArgs_QueryID_DEFAULT *QueryHandle

func (p *BeeswaxServiceFetchArgs) GetQueryID() *QueryHandle {
	if !p.IsSetQueryID() {
		return BeeswaxServiceFetchArgs_QueryID_DEFAULT
	}
	return p.QueryID
}

func (p *BeeswaxServiceFetchArgs) GetStartOver() bool {
	return p.StartOver
}

func (p *BeeswaxServiceFetchArgs) GetFetchSize() int32 {
	return p.FetchSize
}
func (p *BeeswaxServiceFetchArgs) IsSetQueryID() bool {
	return p.QueryID != nil
}

func (p *BeeswaxServiceFetchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchArgs) readField1(iprot thrift.TProtocol) error {
	p.QueryID = &QueryHandle{}
	if err := p.QueryID.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartOver = v
	}
	return nil
}

func (p *BeeswaxServiceFetchArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FetchSize = v
	}
	return nil
}

func (p *BeeswaxServiceFetchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceFetchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_id: ", p), err)
	}
	if err := p.QueryID.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_id: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceFetchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_over", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_over: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StartOver)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_over (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_over: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceFetchArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fetch_size", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fetch_size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.FetchSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fetch_size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fetch_size: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceFetchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceFetchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
//  - Error2
type BeeswaxServiceFetchResult struct {
	Success *Results                `thrift:"success,0" json:"success,omitempty"`
	Error   *QueryNotFoundException `thrift:"error,1" json:"error,omitempty"`
	Error2  *BeeswaxException       `thrift:"error2,2" json:"error2,omitempty"`
}

func NewBeeswaxServiceFetchResult() *BeeswaxServiceFetchResult {
	return &BeeswaxServiceFetchResult{}
}

var BeeswaxServiceFetchResult_Success_DEFAULT *Results

func (p *BeeswaxServiceFetchResult) GetSuccess() *Results {
	if !p.IsSetSuccess() {
		return BeeswaxServiceFetchResult_Success_DEFAULT
	}
	return p.Success
}

var BeeswaxServiceFetchResult_Error_DEFAULT *QueryNotFoundException

func (p *BeeswaxServiceFetchResult) GetError() *QueryNotFoundException {
	if !p.IsSetError() {
		return BeeswaxServiceFetchResult_Error_DEFAULT
	}
	return p.Error
}

var BeeswaxServiceFetchResult_Error2_DEFAULT *BeeswaxException

func (p *BeeswaxServiceFetchResult) GetError2() *BeeswaxException {
	if !p.IsSetError2() {
		return BeeswaxServiceFetchResult_Error2_DEFAULT
	}
	return p.Error2
}
func (p *BeeswaxServiceFetchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceFetchResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceFetchResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *BeeswaxServiceFetchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Results{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &QueryNotFoundException{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchResult) readField2(iprot thrift.TProtocol) error {
	p.Error2 = &BeeswaxException{
		SQLState: "     ",
	}
	if err := p.Error2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
	}
	return nil
}

func (p *BeeswaxServiceFetchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceFetchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceFetchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceFetchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceFetchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceFetchResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceGetStateArgs struct {
	Handle *QueryHandle `thrift:"handle,1" json:"handle"`
}

func NewBeeswaxServiceGetStateArgs() *BeeswaxServiceGetStateArgs {
	return &BeeswaxServiceGetStateArgs{}
}

var BeeswaxServiceGetStateArgs_Handle_DEFAULT *QueryHandle

func (p *BeeswaxServiceGetStateArgs) GetHandle() *QueryHandle {
	if !p.IsSetHandle() {
		return BeeswaxServiceGetStateArgs_Handle_DEFAULT
	}
	return p.Handle
}
func (p *BeeswaxServiceGetStateArgs) IsSetHandle() bool {
	return p.Handle != nil
}

func (p *BeeswaxServiceGetStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateArgs) readField1(iprot thrift.TProtocol) error {
	p.Handle = &QueryHandle{}
	if err := p.Handle.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_state_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err)
	}
	if err := p.Handle.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceGetStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetStateResult struct {
	Success *QueryState             `thrift:"success,0" json:"success,omitempty"`
	Error   *QueryNotFoundException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceGetStateResult() *BeeswaxServiceGetStateResult {
	return &BeeswaxServiceGetStateResult{}
}

var BeeswaxServiceGetStateResult_Success_DEFAULT QueryState

func (p *BeeswaxServiceGetStateResult) GetSuccess() QueryState {
	if !p.IsSetSuccess() {
		return BeeswaxServiceGetStateResult_Success_DEFAULT
	}
	return *p.Success
}

var BeeswaxServiceGetStateResult_Error_DEFAULT *QueryNotFoundException

func (p *BeeswaxServiceGetStateResult) GetError() *QueryNotFoundException {
	if !p.IsSetError() {
		return BeeswaxServiceGetStateResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceGetStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceGetStateResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceGetStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := QueryState(v)
		p.Success = &temp
	}
	return nil
}

func (p *BeeswaxServiceGetStateResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &QueryNotFoundException{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_state_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetStateResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceGetResultsMetadataArgs struct {
	Handle *QueryHandle `thrift:"handle,1" json:"handle"`
}

func NewBeeswaxServiceGetResultsMetadataArgs() *BeeswaxServiceGetResultsMetadataArgs {
	return &BeeswaxServiceGetResultsMetadataArgs{}
}

var BeeswaxServiceGetResultsMetadataArgs_Handle_DEFAULT *QueryHandle

func (p *BeeswaxServiceGetResultsMetadataArgs) GetHandle() *QueryHandle {
	if !p.IsSetHandle() {
		return BeeswaxServiceGetResultsMetadataArgs_Handle_DEFAULT
	}
	return p.Handle
}
func (p *BeeswaxServiceGetResultsMetadataArgs) IsSetHandle() bool {
	return p.Handle != nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) readField1(iprot thrift.TProtocol) error {
	p.Handle = &QueryHandle{}
	if err := p.Handle.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_results_metadata_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err)
	}
	if err := p.Handle.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceGetResultsMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetResultsMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetResultsMetadataResult struct {
	Success *ResultsMetadata        `thrift:"success,0" json:"success,omitempty"`
	Error   *QueryNotFoundException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceGetResultsMetadataResult() *BeeswaxServiceGetResultsMetadataResult {
	return &BeeswaxServiceGetResultsMetadataResult{}
}

var BeeswaxServiceGetResultsMetadataResult_Success_DEFAULT *ResultsMetadata

func (p *BeeswaxServiceGetResultsMetadataResult) GetSuccess() *ResultsMetadata {
	if !p.IsSetSuccess() {
		return BeeswaxServiceGetResultsMetadataResult_Success_DEFAULT
	}
	return p.Success
}

var BeeswaxServiceGetResultsMetadataResult_Error_DEFAULT *QueryNotFoundException

func (p *BeeswaxServiceGetResultsMetadataResult) GetError() *QueryNotFoundException {
	if !p.IsSetError() {
		return BeeswaxServiceGetResultsMetadataResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceGetResultsMetadataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ResultsMetadata{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &QueryNotFoundException{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_results_metadata_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetResultsMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetResultsMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetResultsMetadataResult(%+v)", *p)
}

// Attributes:
//  - S
type BeeswaxServiceEchoArgs struct {
	S string `thrift:"s,1" json:"s"`
}

func NewBeeswaxServiceEchoArgs() *BeeswaxServiceEchoArgs {
	return &BeeswaxServiceEchoArgs{}
}

func (p *BeeswaxServiceEchoArgs) GetS() string {
	return p.S
}
func (p *BeeswaxServiceEchoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceEchoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *BeeswaxServiceEchoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceEchoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err)
	}
	if err := oprot.WriteString(string(p.S)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceEchoResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewBeeswaxServiceEchoResult() *BeeswaxServiceEchoResult {
	return &BeeswaxServiceEchoResult{}
}

var BeeswaxServiceEchoResult_Success_DEFAULT string

func (p *BeeswaxServiceEchoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BeeswaxServiceEchoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BeeswaxServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceEchoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceEchoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BeeswaxServiceEchoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("echo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceEchoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceEchoResult(%+v)", *p)
}

type BeeswaxServiceDumpConfigArgs struct {
}

func NewBeeswaxServiceDumpConfigArgs() *BeeswaxServiceDumpConfigArgs {
	return &BeeswaxServiceDumpConfigArgs{}
}

func (p *BeeswaxServiceDumpConfigArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceDumpConfigArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dump_config_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceDumpConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceDumpConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceDumpConfigResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewBeeswaxServiceDumpConfigResult() *BeeswaxServiceDumpConfigResult {
	return &BeeswaxServiceDumpConfigResult{}
}

var BeeswaxServiceDumpConfigResult_Success_DEFAULT string

func (p *BeeswaxServiceDumpConfigResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BeeswaxServiceDumpConfigResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BeeswaxServiceDumpConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceDumpConfigResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceDumpConfigResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BeeswaxServiceDumpConfigResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dump_config_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceDumpConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceDumpConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceDumpConfigResult(%+v)", *p)
}

// Attributes:
//  - Context
type BeeswaxServiceGetLogArgs struct {
	Context LogContextId `thrift:"context,1" json:"context"`
}

func NewBeeswaxServiceGetLogArgs() *BeeswaxServiceGetLogArgs {
	return &BeeswaxServiceGetLogArgs{}
}

func (p *BeeswaxServiceGetLogArgs) GetContext() LogContextId {
	return p.Context
}
func (p *BeeswaxServiceGetLogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetLogArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := LogContextId(v)
		p.Context = temp
	}
	return nil
}

func (p *BeeswaxServiceGetLogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_log_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetLogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err)
	}
	if err := oprot.WriteString(string(p.Context)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceGetLogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetLogArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetLogResult struct {
	Success *string                 `thrift:"success,0" json:"success,omitempty"`
	Error   *QueryNotFoundException `thrift:"error,1" json:"error,omitempty"`
}

func NewBeeswaxServiceGetLogResult() *BeeswaxServiceGetLogResult {
	return &BeeswaxServiceGetLogResult{}
}

var BeeswaxServiceGetLogResult_Success_DEFAULT string

func (p *BeeswaxServiceGetLogResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BeeswaxServiceGetLogResult_Success_DEFAULT
	}
	return *p.Success
}

var BeeswaxServiceGetLogResult_Error_DEFAULT *QueryNotFoundException

func (p *BeeswaxServiceGetLogResult) GetError() *QueryNotFoundException {
	if !p.IsSetError() {
		return BeeswaxServiceGetLogResult_Error_DEFAULT
	}
	return p.Error
}
func (p *BeeswaxServiceGetLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceGetLogResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceGetLogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetLogResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BeeswaxServiceGetLogResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &QueryNotFoundException{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceGetLogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_log_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetLogResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetLogResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetLogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetLogResult(%+v)", *p)
}

// Attributes:
//  - IncludeHadoop
type BeeswaxServiceGetDefaultConfigurationArgs struct {
	IncludeHadoop bool `thrift:"include_hadoop,1" json:"include_hadoop"`
}

func NewBeeswaxServiceGetDefaultConfigurationArgs() *BeeswaxServiceGetDefaultConfigurationArgs {
	return &BeeswaxServiceGetDefaultConfigurationArgs{}
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) GetIncludeHadoop() bool {
	return p.IncludeHadoop
}
func (p *BeeswaxServiceGetDefaultConfigurationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IncludeHadoop = v
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_default_configuration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("include_hadoop", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:include_hadoop: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IncludeHadoop)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.include_hadoop (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:include_hadoop: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetDefaultConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceGetDefaultConfigurationResult struct {
	Success []*ConfigVariable `thrift:"success,0" json:"success,omitempty"`
}

func NewBeeswaxServiceGetDefaultConfigurationResult() *BeeswaxServiceGetDefaultConfigurationResult {
	return &BeeswaxServiceGetDefaultConfigurationResult{}
}

var BeeswaxServiceGetDefaultConfigurationResult_Success_DEFAULT []*ConfigVariable

func (p *BeeswaxServiceGetDefaultConfigurationResult) GetSuccess() []*ConfigVariable {
	return p.Success
}
func (p *BeeswaxServiceGetDefaultConfigurationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ConfigVariable, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &ConfigVariable{}
		if err := _elem29.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
		}
		p.Success = append(p.Success, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_default_configuration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceGetDefaultConfigurationResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceCloseArgs struct {
	Handle *QueryHandle `thrift:"handle,1" json:"handle"`
}

func NewBeeswaxServiceCloseArgs() *BeeswaxServiceCloseArgs {
	return &BeeswaxServiceCloseArgs{}
}

var BeeswaxServiceCloseArgs_Handle_DEFAULT *QueryHandle

func (p *BeeswaxServiceCloseArgs) GetHandle() *QueryHandle {
	if !p.IsSetHandle() {
		return BeeswaxServiceCloseArgs_Handle_DEFAULT
	}
	return p.Handle
}
func (p *BeeswaxServiceCloseArgs) IsSetHandle() bool {
	return p.Handle != nil
}

func (p *BeeswaxServiceCloseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceCloseArgs) readField1(iprot thrift.TProtocol) error {
	p.Handle = &QueryHandle{}
	if err := p.Handle.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
	}
	return nil
}

func (p *BeeswaxServiceCloseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("close_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceCloseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err)
	}
	if err := p.Handle.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceCloseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceCloseArgs(%+v)", *p)
}

// Attributes:
//  - Error
//  - Error2
type BeeswaxServiceCloseResult struct {
	Error  *QueryNotFoundException `thrift:"error,1" json:"error,omitempty"`
	Error2 *BeeswaxException       `thrift:"error2,2" json:"error2,omitempty"`
}

func NewBeeswaxServiceCloseResult() *BeeswaxServiceCloseResult {
	return &BeeswaxServiceCloseResult{}
}

var BeeswaxServiceCloseResult_Error_DEFAULT *QueryNotFoundException

func (p *BeeswaxServiceCloseResult) GetError() *QueryNotFoundException {
	if !p.IsSetError() {
		return BeeswaxServiceCloseResult_Error_DEFAULT
	}
	return p.Error
}

var BeeswaxServiceCloseResult_Error2_DEFAULT *BeeswaxException

func (p *BeeswaxServiceCloseResult) GetError2() *BeeswaxException {
	if !p.IsSetError2() {
		return BeeswaxServiceCloseResult_Error2_DEFAULT
	}
	return p.Error2
}
func (p *BeeswaxServiceCloseResult) IsSetError() bool {
	return p.Error != nil
}

func (p *BeeswaxServiceCloseResult) IsSetError2() bool {
	return p.Error2 != nil
}

func (p *BeeswaxServiceCloseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceCloseResult) readField1(iprot thrift.TProtocol) error {
	p.Error = &QueryNotFoundException{}
	if err := p.Error.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *BeeswaxServiceCloseResult) readField2(iprot thrift.TProtocol) error {
	p.Error2 = &BeeswaxException{
		SQLState: "     ",
	}
	if err := p.Error2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
	}
	return nil
}

func (p *BeeswaxServiceCloseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("close_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceCloseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceCloseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetError2() {
		if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err)
		}
		if err := p.Error2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err)
		}
	}
	return err
}

func (p *BeeswaxServiceCloseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceCloseResult(%+v)", *p)
}

// Attributes:
//  - LogContext
type BeeswaxServiceCleanArgs struct {
	LogContext LogContextId `thrift:"log_context,1" json:"log_context"`
}

func NewBeeswaxServiceCleanArgs() *BeeswaxServiceCleanArgs {
	return &BeeswaxServiceCleanArgs{}
}

func (p *BeeswaxServiceCleanArgs) GetLogContext() LogContextId {
	return p.LogContext
}
func (p *BeeswaxServiceCleanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceCleanArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := LogContextId(v)
		p.LogContext = temp
	}
	return nil
}

func (p *BeeswaxServiceCleanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceCleanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("log_context", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:log_context: ", p), err)
	}
	if err := oprot.WriteString(string(p.LogContext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.log_context (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:log_context: ", p), err)
	}
	return err
}

func (p *BeeswaxServiceCleanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceCleanArgs(%+v)", *p)
}

type BeeswaxServiceCleanResult struct {
}

func NewBeeswaxServiceCleanResult() *BeeswaxServiceCleanResult {
	return &BeeswaxServiceCleanResult{}
}

func (p *BeeswaxServiceCleanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BeeswaxServiceCleanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clean_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeeswaxServiceCleanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeeswaxServiceCleanResult(%+v)", *p)
}
