// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_metastore

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/wuhentianya001/impalathing/services/fb303"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__

type ThriftHiveMetastore interface {
	fb303.FacebookService
	//This interface is live.

	// Parameters:
	//  - Database
	CreateDatabase(database *Database) (err error)
	// Parameters:
	//  - Name
	GetDatabase(name string) (r *Database, err error)
	// Parameters:
	//  - Name
	//  - DeleteData
	DropDatabase(name string, deleteData bool) (err error)
	// Parameters:
	//  - Pattern
	GetDatabases(pattern string) (r []string, err error)
	GetAllDatabases() (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - Db
	AlterDatabase(dbname string, db *Database) (err error)
	// Parameters:
	//  - Name
	GetType(name string) (r *Type, err error)
	// Parameters:
	//  - Type
	CreateType(type_a1 *Type) (r bool, err error)
	// Parameters:
	//  - Type
	DropType(type_a1 string) (r bool, err error)
	// Parameters:
	//  - Name
	GetTypeAll(name string) (r map[string]*Type, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetFields(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetSchema(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - Tbl
	CreateTable(tbl *Table) (err error)
	// Parameters:
	//  - Dbname
	//  - Name
	//  - DeleteData
	DropTable(dbname string, name string, deleteData bool) (err error)
	// Parameters:
	//  - DbName
	//  - Pattern
	GetTables(db_name string, pattern string) (r []string, err error)
	// Parameters:
	//  - DbName
	GetAllTables(db_name string) (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	GetTable(dbname string, tbl_name string) (r *Table, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	//  - NewTbl_
	AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error)
	// Parameters:
	//  - NewPart_
	AddPartition(new_part *Partition) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - DeleteData
	DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - DeleteData
	DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - UserName
	//  - GroupNames
	GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - Filter
	//  - MaxParts
	GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewPart_
	AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error)
	// Parameters:
	//  - Name
	//  - DefaultValue
	GetConfigValue(name string, defaultValue string) (r string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToVals(part_name string) (r []string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToSpec(part_name string) (r map[string]string, err error)
	// Parameters:
	//  - NewIndex_
	//  - IndexTable
	AddIndex(new_index *Index, index_table *Table) (r *Index, err error)
	// Parameters:
	//  - Dbname
	//  - BaseTblName
	//  - IdxName
	//  - NewIdx_
	AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	//  - DeleteData
	DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error)
	// Parameters:
	//  - Role
	CreateRole(role *Role) (r bool, err error)
	// Parameters:
	//  - RoleName
	DropRole(role_name string) (r bool, err error)
	GetRoleNames() (r []string, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	//  - Grantor
	//  - GrantorType
	//  - GrantOption
	GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error)
	// Parameters:
	//  - HiveObject
	//  - UserName
	//  - GroupNames
	GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	//  - HiveObject
	ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error)
	// Parameters:
	//  - Privileges
	GrantPrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - Privileges
	RevokePrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	GetDelegationToken(renewer_kerberos_principal_name string) (r string, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	//  - TokenSignature
	GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, err error)
	// Parameters:
	//  - TokenStrForm
	RenewDelegationToken(token_str_form string) (r int64, err error)
	// Parameters:
	//  - TokenStrForm
	CancelDelegationToken(token_str_form string) (err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
	*fb303.FacebookServiceClient
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}
}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(database *Database) (err error) {
	if err = p.sendCreateDatabase(database); err != nil {
		return
	}
	return p.recvCreateDatabase()
}

func (p *ThriftHiveMetastoreClient) sendCreateDatabase(database *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreCreateDatabaseArgs{
		Database: database,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_database" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_database failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_database failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_database failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreCreateDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(name string) (r *Database, err error) {
	if err = p.sendGetDatabase(name); err != nil {
		return
	}
	return p.recvGetDatabase()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabase(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetDatabaseArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabase() (value *Database, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_database" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_database failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_database failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_database failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropDatabase(name string, deleteData bool) (err error) {
	if err = p.sendDropDatabase(name, deleteData); err != nil {
		return
	}
	return p.recvDropDatabase()
}

func (p *ThriftHiveMetastoreClient) sendDropDatabase(name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropDatabaseArgs{
		Name:       name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_database" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_database failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_database failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_database failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(pattern string) (r []string, err error) {
	if err = p.sendGetDatabases(pattern); err != nil {
		return
	}
	return p.recvGetDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabases(pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetDatabasesArgs{
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_databases" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_databases failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_databases failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_databases failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases() (r []string, err error) {
	if err = p.sendGetAllDatabases(); err != nil {
		return
	}
	return p.recvGetAllDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetAllDatabases() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetAllDatabasesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_all_databases" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_all_databases failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_databases failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_all_databases failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetAllDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(dbname string, db *Database) (err error) {
	if err = p.sendAlterDatabase(dbname, db); err != nil {
		return
	}
	return p.recvAlterDatabase()
}

func (p *ThriftHiveMetastoreClient) sendAlterDatabase(dbname string, db *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAlterDatabaseArgs{
		Dbname: dbname,
		Db:     db,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_database" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_database failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_database failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_database failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAlterDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(name string) (r *Type, err error) {
	if err = p.sendGetType(name); err != nil {
		return
	}
	return p.recvGetType()
}

func (p *ThriftHiveMetastoreClient) sendGetType(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetTypeArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetType() (value *Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_type" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_type failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_type failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) CreateType(type_a1 *Type) (r bool, err error) {
	if err = p.sendCreateType(type_a1); err != nil {
		return
	}
	return p.recvCreateType()
}

func (p *ThriftHiveMetastoreClient) sendCreateType(type_a1 *Type) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreCreateTypeArgs{
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_type" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_type failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_type failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_type failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreCreateTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) DropType(type_a1 string) (r bool, err error) {
	if err = p.sendDropType(type_a1); err != nil {
		return
	}
	return p.recvDropType()
}

func (p *ThriftHiveMetastoreClient) sendDropType(type_a1 string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropTypeArgs{
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_type" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_type failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_type failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_type failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(name string) (r map[string]*Type, err error) {
	if err = p.sendGetTypeAll(name); err != nil {
		return
	}
	return p.recvGetTypeAll()
}

func (p *ThriftHiveMetastoreClient) sendGetTypeAll(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type_all", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetTypeAllArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTypeAll() (value map[string]*Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_type_all" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_type_all failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type_all failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_type_all failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetTypeAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetFields(db_name, table_name); err != nil {
		return
	}
	return p.recvGetFields()
}

func (p *ThriftHiveMetastoreClient) sendGetFields(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_fields", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetFieldsArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetFields() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_fields" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_fields failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_fields failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_fields failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetFieldsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetSchema(db_name, table_name); err != nil {
		return
	}
	return p.recvGetSchema()
}

func (p *ThriftHiveMetastoreClient) sendGetSchema(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_schema", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetSchemaArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetSchema() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_schema" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_schema failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_schema failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_schema failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetSchemaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(tbl *Table) (err error) {
	if err = p.sendCreateTable(tbl); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *ThriftHiveMetastoreClient) sendCreateTable(tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreCreateTableArgs{
		Tbl: tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_table failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreCreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	return
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(dbname string, name string, deleteData bool) (err error) {
	if err = p.sendDropTable(dbname, name, deleteData); err != nil {
		return
	}
	return p.recvDropTable()
}

func (p *ThriftHiveMetastoreClient) sendDropTable(dbname string, name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropTableArgs{
		Dbname:     dbname,
		Name:       name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_table failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(db_name string, pattern string) (r []string, err error) {
	if err = p.sendGetTables(db_name, pattern); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *ThriftHiveMetastoreClient) sendGetTables(db_name string, pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetTablesArgs{
		DbName:  db_name,
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_tables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_tables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_tables failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(db_name string) (r []string, err error) {
	if err = p.sendGetAllTables(db_name); err != nil {
		return
	}
	return p.recvGetAllTables()
}

func (p *ThriftHiveMetastoreClient) sendGetAllTables(db_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetAllTablesArgs{
		DbName: db_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_all_tables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_all_tables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_tables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_all_tables failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetAllTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(dbname string, tbl_name string) (r *Table, err error) {
	if err = p.sendGetTable(dbname, tbl_name); err != nil {
		return
	}
	return p.recvGetTable()
}

func (p *ThriftHiveMetastoreClient) sendGetTable(dbname string, tbl_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTable() (value *Table, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_table failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
func (p *ThriftHiveMetastoreClient) AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	if err = p.sendAlterTable(dbname, tbl_name, new_tbl); err != nil {
		return
	}
	return p.recvAlterTable()
}

func (p *ThriftHiveMetastoreClient) sendAlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAlterTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
		NewTbl_: new_tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_table" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_table failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_table failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_table failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAlterTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AddPartition(new_part *Partition) (r *Partition, err error) {
	if err = p.sendAddPartition(new_part); err != nil {
		return
	}
	return p.recvAddPartition()
}

func (p *ThriftHiveMetastoreClient) sendAddPartition(new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAddPartitionArgs{
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "add_partition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_partition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_partition failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAddPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendAppendPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvAppendPartition()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAppendPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "append_partition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "append_partition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "append_partition failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAppendPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendAppendPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvAppendPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAppendPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "append_partition_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "append_partition_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "append_partition_by_name failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAppendPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartition(db_name, tbl_name, part_vals, deleteData); err != nil {
		return
	}
	return p.recvDropPartition()
}

func (p *ThriftHiveMetastoreClient) sendDropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropPartitionArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartition() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_partition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_partition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_partition failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartitionByName(db_name, tbl_name, part_name, deleteData); err != nil {
		return
	}
	return p.recvDropPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropPartitionByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartName:   part_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_partition_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_partition_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_partition_by_name failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendGetPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvGetPartition()
}

func (p *ThriftHiveMetastoreClient) sendGetPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partition failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error) {
	if err = p.sendGetPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionWithAuth() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partition_with_auth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partition_with_auth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_with_auth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partition_with_auth failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendGetPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvGetPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partition_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partition_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partition_by_name failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitions(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitions()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitions(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitions() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partitions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partitions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partitions failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partitions_with_auth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partitions_with_auth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_with_auth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partitions_with_auth failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNames(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNames()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNames(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionNamesArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partition_names" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partition_names failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partition_names failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionsPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPs() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partitions_ps" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partitions_ps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partitions_ps failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionsPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsPsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partitions_ps_with_auth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partitions_ps_with_auth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps_with_auth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partitions_ps_with_auth failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNamesPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNamesPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionNamesPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNamesPs() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partition_names_ps" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partition_names_ps failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names_ps failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partition_names_ps failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionNamesPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsByFilter(db_name, tbl_name, filter, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsByFilter()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPartitionsByFilterArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		Filter:   filter,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByFilter() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_partitions_by_filter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_partitions_by_filter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_by_filter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_partitions_by_filter failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPartitionsByFilterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	if err = p.sendAlterPartition(db_name, tbl_name, new_part); err != nil {
		return
	}
	return p.recvAlterPartition()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAlterPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterPartition() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_partition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_partition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_partition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_partition failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAlterPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(name string, defaultValue string) (r string, err error) {
	if err = p.sendGetConfigValue(name, defaultValue); err != nil {
		return
	}
	return p.recvGetConfigValue()
}

func (p *ThriftHiveMetastoreClient) sendGetConfigValue(name string, defaultValue string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_config_value", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetConfigValueArgs{
		Name:         name,
		DefaultValue: defaultValue,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetConfigValue() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_config_value" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_config_value failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_config_value failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_config_value failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetConfigValueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(part_name string) (r []string, err error) {
	if err = p.sendPartitionNameToVals(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToVals()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToVals(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_vals", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastorePartitionNameToValsArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToVals() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "partition_name_to_vals" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "partition_name_to_vals failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_vals failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "partition_name_to_vals failed: invalid message type")
		return
	}
	result := ThriftHiveMetastorePartitionNameToValsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(part_name string) (r map[string]string, err error) {
	if err = p.sendPartitionNameToSpec(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToSpec()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToSpec(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_spec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastorePartitionNameToSpecArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToSpec() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "partition_name_to_spec" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "partition_name_to_spec failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_spec failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "partition_name_to_spec failed: invalid message type")
		return
	}
	result := ThriftHiveMetastorePartitionNameToSpecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NewIndex_
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(new_index *Index, index_table *Table) (r *Index, err error) {
	if err = p.sendAddIndex(new_index, index_table); err != nil {
		return
	}
	return p.recvAddIndex()
}

func (p *ThriftHiveMetastoreClient) sendAddIndex(new_index *Index, index_table *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAddIndexArgs{
		NewIndex_:  new_index,
		IndexTable: index_table,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddIndex() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "add_index" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_index failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_index failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_index failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAddIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
func (p *ThriftHiveMetastoreClient) AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	if err = p.sendAlterIndex(dbname, base_tbl_name, idx_name, new_idx); err != nil {
		return
	}
	return p.recvAlterIndex()
}

func (p *ThriftHiveMetastoreClient) sendAlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreAlterIndexArgs{
		Dbname:      dbname,
		BaseTblName: base_tbl_name,
		IdxName:     idx_name,
		NewIdx_:     new_idx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterIndex() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "alter_index" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "alter_index failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_index failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alter_index failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreAlterIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropIndexByName(db_name, tbl_name, index_name, deleteData); err != nil {
		return
	}
	return p.recvDropIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendDropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropIndexByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		IndexName:  index_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropIndexByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_index_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_index_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_index_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_index_by_name failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error) {
	if err = p.sendGetIndexByName(db_name, tbl_name, index_name); err != nil {
		return
	}
	return p.recvGetIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexByName(db_name string, tbl_name string, index_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetIndexByNameArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		IndexName: index_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexByName() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_index_by_name" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_index_by_name failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_by_name failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_index_by_name failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error) {
	if err = p.sendGetIndexes(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexes()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexes(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_indexes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetIndexesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexes() (value []*Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_indexes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_indexes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_indexes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_indexes failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetIndexesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error) {
	if err = p.sendGetIndexNames(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexNames()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexNames(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetIndexNamesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_index_names" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_index_names failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_names failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_index_names failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetIndexNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(role *Role) (r bool, err error) {
	if err = p.sendCreateRole(role); err != nil {
		return
	}
	return p.recvCreateRole()
}

func (p *ThriftHiveMetastoreClient) sendCreateRole(role *Role) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreCreateRoleArgs{
		Role: role,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "create_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_role failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreCreateRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(role_name string) (r bool, err error) {
	if err = p.sendDropRole(role_name); err != nil {
		return
	}
	return p.recvDropRole()
}

func (p *ThriftHiveMetastoreClient) sendDropRole(role_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreDropRoleArgs{
		RoleName: role_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "drop_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "drop_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "drop_role failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreDropRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetRoleNames() (r []string, err error) {
	if err = p.sendGetRoleNames(); err != nil {
		return
	}
	return p.recvGetRoleNames()
}

func (p *ThriftHiveMetastoreClient) sendGetRoleNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_role_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetRoleNamesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetRoleNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_role_names" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_role_names failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_role_names failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_role_names failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetRoleNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error) {
	if err = p.sendGrantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option); err != nil {
		return
	}
	return p.recvGrantRole()
}

func (p *ThriftHiveMetastoreClient) sendGrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGrantRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		Grantor:       grantor,
		GrantorType:   grantorType,
		GrantOption:   grant_option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "grant_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "grant_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grant_role failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGrantRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error) {
	if err = p.sendRevokeRole(role_name, principal_name, principal_type); err != nil {
		return
	}
	return p.recvRevokeRole()
}

func (p *ThriftHiveMetastoreClient) sendRevokeRole(role_name string, principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreRevokeRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokeRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "revoke_role" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revoke_role failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_role failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revoke_role failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreRevokeRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error) {
	if err = p.sendListRoles(principal_name, principal_type); err != nil {
		return
	}
	return p.recvListRoles()
}

func (p *ThriftHiveMetastoreClient) sendListRoles(principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_roles", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreListRolesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListRoles() (value []*Role, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_roles" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_roles failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_roles failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_roles failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreListRolesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error) {
	if err = p.sendGetPrivilegeSet(hiveObject, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPrivilegeSet()
}

func (p *ThriftHiveMetastoreClient) sendGetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_privilege_set", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetPrivilegeSetArgs{
		HiveObject: hiveObject,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPrivilegeSet() (value *PrincipalPrivilegeSet, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_privilege_set" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_privilege_set failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_privilege_set failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_privilege_set failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetPrivilegeSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error) {
	if err = p.sendListPrivileges(principal_name, principal_type, hiveObject); err != nil {
		return
	}
	return p.recvListPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreListPrivilegesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		HiveObject:    hiveObject,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListPrivileges() (value []*HiveObjectPrivilege, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "list_privileges" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "list_privileges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_privileges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "list_privileges failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreListPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendGrantPrivileges(privileges); err != nil {
		return
	}
	return p.recvGrantPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendGrantPrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGrantPrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantPrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "grant_privileges" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "grant_privileges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_privileges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grant_privileges failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGrantPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendRevokePrivileges(privileges); err != nil {
		return
	}
	return p.recvRevokePrivileges()
}

func (p *ThriftHiveMetastoreClient) sendRevokePrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreRevokePrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokePrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "revoke_privileges" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revoke_privileges failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_privileges failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revoke_privileges failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreRevokePrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(renewer_kerberos_principal_name string) (r string, err error) {
	if err = p.sendGetDelegationToken(renewer_kerberos_principal_name); err != nil {
		return
	}
	return p.recvGetDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationToken(renewer_kerberos_principal_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetDelegationTokenArgs{
		RenewerKerberosPrincipalName: renewer_kerberos_principal_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_delegation_token" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_delegation_token failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_delegation_token failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_delegation_token failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
//  - TokenSignature
func (p *ThriftHiveMetastoreClient) GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, err error) {
	if err = p.sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name, token_signature); err != nil {
		return
	}
	return p.recvGetDelegationTokenWithSignature()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs{
		RenewerKerberosPrincipalName: renewer_kerberos_principal_name,
		TokenSignature:               token_signature,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationTokenWithSignature() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_delegation_token_with_signature" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_delegation_token_with_signature failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_delegation_token_with_signature failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_delegation_token_with_signature failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreGetDelegationTokenWithSignatureResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(token_str_form string) (r int64, err error) {
	if err = p.sendRenewDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvRenewDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendRenewDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renew_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreRenewDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRenewDelegationToken() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "renew_delegation_token" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "renew_delegation_token failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renew_delegation_token failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "renew_delegation_token failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreRenewDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(token_str_form string) (err error) {
	if err = p.sendCancelDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvCancelDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendCancelDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancel_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ThriftHiveMetastoreCancelDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCancelDelegationToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cancel_delegation_token" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancel_delegation_token failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancel_delegation_token failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancel_delegation_token failed: invalid message type")
		return
	}
	result := ThriftHiveMetastoreCancelDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	return
}

type ThriftHiveMetastoreProcessor struct {
	*fb303.FacebookServiceProcessor
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
	self146 := &ThriftHiveMetastoreProcessor{fb303.NewFacebookServiceProcessor(handler)}
	self146.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler: handler})
	self146.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler: handler})
	self146.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler: handler})
	self146.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler: handler})
	self146.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler: handler})
	self146.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler: handler})
	self146.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler: handler})
	self146.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler: handler})
	self146.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler: handler})
	self146.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler: handler})
	self146.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler: handler})
	self146.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler: handler})
	self146.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler: handler})
	self146.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler: handler})
	self146.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler: handler})
	self146.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler: handler})
	self146.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler: handler})
	self146.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler: handler})
	self146.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler: handler})
	self146.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler: handler})
	self146.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler: handler})
	self146.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler: handler})
	self146.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler: handler})
	self146.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler: handler})
	self146.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler: handler})
	self146.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler: handler})
	self146.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler: handler})
	self146.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler: handler})
	self146.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler: handler})
	self146.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler: handler})
	self146.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler: handler})
	self146.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler: handler})
	self146.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler: handler})
	self146.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler: handler})
	self146.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler: handler})
	self146.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler: handler})
	self146.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler: handler})
	self146.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler: handler})
	self146.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler: handler})
	self146.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler: handler})
	self146.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler: handler})
	self146.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler: handler})
	self146.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler: handler})
	self146.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler: handler})
	self146.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler: handler})
	self146.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler: handler})
	self146.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler: handler})
	self146.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler: handler})
	self146.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler: handler})
	self146.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler: handler})
	self146.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler: handler})
	self146.AddToProcessorMap("get_delegation_token_with_signature", &thriftHiveMetastoreProcessorGetDelegationTokenWithSignature{handler: handler})
	self146.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler: handler})
	self146.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler: handler})
	return self146
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreCreateDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreCreateDatabaseResult{}
	var err2 error
	if err2 = p.handler.CreateDatabase(args.Database); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: "+err2.Error())
			oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetDatabaseResult{}
	var retval *Database
	var err2 error
	if retval, err2 = p.handler.GetDatabase(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: "+err2.Error())
			oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropDatabaseResult{}
	var err2 error
	if err2 = p.handler.DropDatabase(args.Name, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *InvalidOperationException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: "+err2.Error())
			oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetDatabasesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetDatabases(args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetAllDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetAllDatabasesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllDatabases(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAlterDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAlterDatabaseResult{}
	var err2 error
	if err2 = p.handler.AlterDatabase(args.Dbname, args.Db); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: "+err2.Error())
			oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetTypeResult{}
	var retval *Type
	var err2 error
	if retval, err2 = p.handler.GetType(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: "+err2.Error())
			oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreCreateTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreCreateTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateType(args.Type); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: "+err2.Error())
			oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropType(args.Type); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: "+err2.Error())
			oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetTypeAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetTypeAllResult{}
	var retval map[string]*Type
	var err2 error
	if retval, err2 = p.handler.GetTypeAll(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: "+err2.Error())
			oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetFieldsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetFieldsResult{}
	var retval []*FieldSchema
	var err2 error
	if retval, err2 = p.handler.GetFields(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: "+err2.Error())
			oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetSchemaResult{}
	var retval []*FieldSchema
	var err2 error
	if retval, err2 = p.handler.GetSchema(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: "+err2.Error())
			oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreCreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreCreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(args.Tbl); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *NoSuchObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: "+err2.Error())
			oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropTableResult{}
	var err2 error
	if err2 = p.handler.DropTable(args.Dbname, args.Name, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: "+err2.Error())
			oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetTables(args.DbName, args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetAllTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetAllTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllTables(args.DbName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetTableResult{}
	var retval *Table
	var err2 error
	if retval, err2 = p.handler.GetTable(args.Dbname, args.TblName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: "+err2.Error())
			oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAlterTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAlterTableResult{}
	var err2 error
	if err2 = p.handler.AlterTable(args.Dbname, args.TblName, args.NewTbl_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: "+err2.Error())
			oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAddPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAddPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AddPartition(args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: "+err2.Error())
			oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAppendPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAppendPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AppendPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: "+err2.Error())
			oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAppendPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAppendPartitionByNameResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AppendPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropPartitionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartition(args.DbName, args.TblName, args.PartVals, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropPartitionByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartitionByName(args.DbName, args.TblName, args.PartName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: "+err2.Error())
			oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionWithAuthResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionWithAuth(args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionByNameResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionsResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitions(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionsWithAuthResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsWithAuth(args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetPartitionNames(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionsPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionsPsResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsPsWithAuth(args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionNamesPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionNamesPsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetPartitionNamesPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPartitionsByFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPartitionsByFilterResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsByFilter(args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAlterPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAlterPartitionResult{}
	var err2 error
	if err2 = p.handler.AlterPartition(args.DbName, args.TblName, args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: "+err2.Error())
			oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetConfigValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetConfigValueResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetConfigValue(args.Name, args.DefaultValue); err2 != nil {
		switch v := err2.(type) {
		case *ConfigValSecurityException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: "+err2.Error())
			oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastorePartitionNameToValsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastorePartitionNameToValsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.PartitionNameToVals(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastorePartitionNameToSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastorePartitionNameToSpecResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.PartitionNameToSpec(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAddIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAddIndexResult{}
	var retval *Index
	var err2 error
	if retval, err2 = p.handler.AddIndex(args.NewIndex_, args.IndexTable); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: "+err2.Error())
			oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreAlterIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreAlterIndexResult{}
	var err2 error
	if err2 = p.handler.AlterIndex(args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: "+err2.Error())
			oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropIndexByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropIndexByName(args.DbName, args.TblName, args.IndexName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetIndexByNameResult{}
	var retval *Index
	var err2 error
	if retval, err2 = p.handler.GetIndexByName(args.DbName, args.TblName, args.IndexName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetIndexesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetIndexesResult{}
	var retval []*Index
	var err2 error
	if retval, err2 = p.handler.GetIndexes(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: "+err2.Error())
			oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetIndexNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetIndexNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetIndexNames(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: "+err2.Error())
			oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreCreateRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreCreateRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateRole(args.Role); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: "+err2.Error())
			oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreDropRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreDropRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropRole(args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: "+err2.Error())
			oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetRoleNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetRoleNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRoleNames(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: "+err2.Error())
			oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGrantRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGrantRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantRole(args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: "+err2.Error())
			oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreRevokeRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreRevokeRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokeRole(args.RoleName, args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: "+err2.Error())
			oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreListRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreListRolesResult{}
	var retval []*Role
	var err2 error
	if retval, err2 = p.handler.ListRoles(args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: "+err2.Error())
			oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetPrivilegeSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetPrivilegeSetResult{}
	var retval *PrincipalPrivilegeSet
	var err2 error
	if retval, err2 = p.handler.GetPrivilegeSet(args.HiveObject, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: "+err2.Error())
			oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreListPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreListPrivilegesResult{}
	var retval []*HiveObjectPrivilege
	var err2 error
	if retval, err2 = p.handler.ListPrivileges(args.PrincipalName, args.PrincipalType, args.HiveObject); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: "+err2.Error())
			oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGrantPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGrantPrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantPrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: "+err2.Error())
			oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreRevokePrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreRevokePrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokePrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: "+err2.Error())
			oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetDelegationTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetDelegationToken(args.RenewerKerberosPrincipalName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationTokenWithSignature struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationTokenWithSignature) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreGetDelegationTokenWithSignatureResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetDelegationTokenWithSignature(args.RenewerKerberosPrincipalName, args.TokenSignature); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token_with_signature: "+err2.Error())
			oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreRenewDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreRenewDelegationTokenResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.RenewDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ThriftHiveMetastoreCancelDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ThriftHiveMetastoreCancelDelegationTokenResult{}
	var err2 error
	if err2 = p.handler.CancelDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Database
type ThriftHiveMetastoreCreateDatabaseArgs struct {
	Database *Database `thrift:"database,1" json:"database"`
}

func NewThriftHiveMetastoreCreateDatabaseArgs() *ThriftHiveMetastoreCreateDatabaseArgs {
	return &ThriftHiveMetastoreCreateDatabaseArgs{}
}

var ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT *Database

func (p *ThriftHiveMetastoreCreateDatabaseArgs) GetDatabase() *Database {
	if !p.IsSetDatabase() {
		return ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT
	}
	return p.Database
}
func (p *ThriftHiveMetastoreCreateDatabaseArgs) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	p.Database = &Database{}
	if err := p.Database.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Database), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database: ", p), err)
	}
	if err := p.Database.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Database), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateDatabaseResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1,omitempty"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2,omitempty"`
	O3 *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateDatabaseResult() *ThriftHiveMetastoreCreateDatabaseResult {
	return &ThriftHiveMetastoreCreateDatabaseResult{}
}

var ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetDatabaseArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewThriftHiveMetastoreGetDatabaseArgs() *ThriftHiveMetastoreGetDatabaseArgs {
	return &ThriftHiveMetastoreGetDatabaseArgs{}
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) GetName() string {
	return p.Name
}
func (p *ThriftHiveMetastoreGetDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetDatabaseResult struct {
	Success *Database              `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetDatabaseResult() *ThriftHiveMetastoreGetDatabaseResult {
	return &ThriftHiveMetastoreGetDatabaseResult{}
}

var ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT *Database

func (p *ThriftHiveMetastoreGetDatabaseResult) GetSuccess() *Database {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetDatabaseResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Database{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DeleteData
type ThriftHiveMetastoreDropDatabaseArgs struct {
	Name       string `thrift:"name,1" json:"name"`
	DeleteData bool   `thrift:"deleteData,2" json:"deleteData"`
}

func NewThriftHiveMetastoreDropDatabaseArgs() *ThriftHiveMetastoreDropDatabaseArgs {
	return &ThriftHiveMetastoreDropDatabaseArgs{}
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetName() string {
	return p.Name
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *ThriftHiveMetastoreDropDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deleteData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleteData (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deleteData: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreDropDatabaseResult struct {
	O1 *NoSuchObjectException     `thrift:"o1,1" json:"o1,omitempty"`
	O2 *InvalidOperationException `thrift:"o2,2" json:"o2,omitempty"`
	O3 *MetaException             `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropDatabaseResult() *ThriftHiveMetastoreDropDatabaseResult {
	return &ThriftHiveMetastoreDropDatabaseResult{}
}

var ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT *InvalidOperationException

func (p *ThriftHiveMetastoreDropDatabaseResult) GetO2() *InvalidOperationException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidOperationException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Pattern
type ThriftHiveMetastoreGetDatabasesArgs struct {
	Pattern string `thrift:"pattern,1" json:"pattern"`
}

func NewThriftHiveMetastoreGetDatabasesArgs() *ThriftHiveMetastoreGetDatabasesArgs {
	return &ThriftHiveMetastoreGetDatabasesArgs{}
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) GetPattern() string {
	return p.Pattern
}
func (p *ThriftHiveMetastoreGetDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pattern: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pattern (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pattern: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDatabasesResult() *ThriftHiveMetastoreGetDatabasesResult {
	return &ThriftHiveMetastoreGetDatabasesResult{}
}

var ThriftHiveMetastoreGetDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetDatabasesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem147 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem147 = v
		}
		p.Success = append(p.Success, _elem147)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesResult(%+v)", *p)
}

type ThriftHiveMetastoreGetAllDatabasesArgs struct {
}

func NewThriftHiveMetastoreGetAllDatabasesArgs() *ThriftHiveMetastoreGetAllDatabasesArgs {
	return &ThriftHiveMetastoreGetAllDatabasesArgs{}
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllDatabasesResult() *ThriftHiveMetastoreGetAllDatabasesResult {
	return &ThriftHiveMetastoreGetAllDatabasesResult{}
}

var ThriftHiveMetastoreGetAllDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem148 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem148 = v
		}
		p.Success = append(p.Success, _elem148)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Db
type ThriftHiveMetastoreAlterDatabaseArgs struct {
	Dbname string    `thrift:"dbname,1" json:"dbname"`
	Db     *Database `thrift:"db,2" json:"db"`
}

func NewThriftHiveMetastoreAlterDatabaseArgs() *ThriftHiveMetastoreAlterDatabaseArgs {
	return &ThriftHiveMetastoreAlterDatabaseArgs{}
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDbname() string {
	return p.Dbname
}

var ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT *Database

func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDb() *Database {
	if !p.IsSetDb() {
		return ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT
	}
	return p.Db
}
func (p *ThriftHiveMetastoreAlterDatabaseArgs) IsSetDb() bool {
	return p.Db != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) readField2(iprot thrift.TProtocol) error {
	p.Db = &Database{}
	if err := p.Db.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Db), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db: ", p), err)
	}
	if err := p.Db.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Db), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterDatabaseResult struct {
	O1 *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2 *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterDatabaseResult() *ThriftHiveMetastoreAlterDatabaseResult {
	return &ThriftHiveMetastoreAlterDatabaseResult{}
}

var ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewThriftHiveMetastoreGetTypeArgs() *ThriftHiveMetastoreGetTypeArgs {
	return &ThriftHiveMetastoreGetTypeArgs{}
}

func (p *ThriftHiveMetastoreGetTypeArgs) GetName() string {
	return p.Name
}
func (p *ThriftHiveMetastoreGetTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTypeResult struct {
	Success *Type                  `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeResult() *ThriftHiveMetastoreGetTypeResult {
	return &ThriftHiveMetastoreGetTypeResult{}
}

var ThriftHiveMetastoreGetTypeResult_Success_DEFAULT *Type

func (p *ThriftHiveMetastoreGetTypeResult) GetSuccess() *Type {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetTypeResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetTypeResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetTypeResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Type{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreCreateTypeArgs struct {
	Type *Type `thrift:"type,1" json:"type"`
}

func NewThriftHiveMetastoreCreateTypeArgs() *ThriftHiveMetastoreCreateTypeArgs {
	return &ThriftHiveMetastoreCreateTypeArgs{}
}

var ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT *Type

func (p *ThriftHiveMetastoreCreateTypeArgs) GetType() *Type {
	if !p.IsSetType() {
		return ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT
	}
	return p.Type
}
func (p *ThriftHiveMetastoreCreateTypeArgs) IsSetType() bool {
	return p.Type != nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) readField1(iprot thrift.TProtocol) error {
	p.Type = &Type{}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := p.Type.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateTypeResult struct {
	Success *bool                   `thrift:"success,0" json:"success,omitempty"`
	O1      *AlreadyExistsException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *InvalidObjectException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateTypeResult() *ThriftHiveMetastoreCreateTypeResult {
	return &ThriftHiveMetastoreCreateTypeResult{}
}

var ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreCreateTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreCreateTypeResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreCreateTypeResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreCreateTypeResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreCreateTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreDropTypeArgs struct {
	Type string `thrift:"type,1" json:"type"`
}

func NewThriftHiveMetastoreDropTypeArgs() *ThriftHiveMetastoreDropTypeArgs {
	return &ThriftHiveMetastoreDropTypeArgs{}
}

func (p *ThriftHiveMetastoreDropTypeArgs) GetType() string {
	return p.Type
}
func (p *ThriftHiveMetastoreDropTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropTypeResult struct {
	Success *bool                  `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropTypeResult() *ThriftHiveMetastoreDropTypeResult {
	return &ThriftHiveMetastoreDropTypeResult{}
}

var ThriftHiveMetastoreDropTypeResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreDropTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreDropTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreDropTypeResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropTypeResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreDropTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreDropTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropTypeResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeAllArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewThriftHiveMetastoreGetTypeAllArgs() *ThriftHiveMetastoreGetTypeAllArgs {
	return &ThriftHiveMetastoreGetTypeAllArgs{}
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) GetName() string {
	return p.Name
}
func (p *ThriftHiveMetastoreGetTypeAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetTypeAllResult struct {
	Success map[string]*Type `thrift:"success,0" json:"success,omitempty"`
	O2      *MetaException   `thrift:"o2,1" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeAllResult() *ThriftHiveMetastoreGetTypeAllResult {
	return &ThriftHiveMetastoreGetTypeAllResult{}
}

var ThriftHiveMetastoreGetTypeAllResult_Success_DEFAULT map[string]*Type

func (p *ThriftHiveMetastoreGetTypeAllResult) GetSuccess() map[string]*Type {
	return p.Success
}

var ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetTypeAllResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Type, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key149 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key149 = v
		}
		_val150 := &Type{}
		if err := _val150.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val150), err)
		}
		p.Success[_key149] = _val150
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetFieldsArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewThriftHiveMetastoreGetFieldsArgs() *ThriftHiveMetastoreGetFieldsArgs {
	return &ThriftHiveMetastoreGetFieldsArgs{}
}

func (p *ThriftHiveMetastoreGetFieldsArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetFieldsArgs) GetTableName() string {
	return p.TableName
}
func (p *ThriftHiveMetastoreGetFieldsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetFieldsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetFieldsResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetFieldsResult() *ThriftHiveMetastoreGetFieldsResult {
	return &ThriftHiveMetastoreGetFieldsResult{}
}

var ThriftHiveMetastoreGetFieldsResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetFieldsResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetFieldsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT *UnknownTableException

func (p *ThriftHiveMetastoreGetFieldsResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT *UnknownDBException

func (p *ThriftHiveMetastoreGetFieldsResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreGetFieldsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem151 := &FieldSchema{}
		if err := _elem151.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem151), err)
		}
		p.Success = append(p.Success, _elem151)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetFieldsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetSchemaArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewThriftHiveMetastoreGetSchemaArgs() *ThriftHiveMetastoreGetSchemaArgs {
	return &ThriftHiveMetastoreGetSchemaArgs{}
}

func (p *ThriftHiveMetastoreGetSchemaArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetSchemaArgs) GetTableName() string {
	return p.TableName
}
func (p *ThriftHiveMetastoreGetSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetSchemaResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetSchemaResult() *ThriftHiveMetastoreGetSchemaResult {
	return &ThriftHiveMetastoreGetSchemaResult{}
}

var ThriftHiveMetastoreGetSchemaResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetSchemaResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetSchemaResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT *UnknownTableException

func (p *ThriftHiveMetastoreGetSchemaResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT *UnknownDBException

func (p *ThriftHiveMetastoreGetSchemaResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreGetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem152 := &FieldSchema{}
		if err := _elem152.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem152), err)
		}
		p.Success = append(p.Success, _elem152)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetSchemaResult(%+v)", *p)
}

// Attributes:
//  - Tbl
type ThriftHiveMetastoreCreateTableArgs struct {
	Tbl *Table `thrift:"tbl,1" json:"tbl"`
}

func NewThriftHiveMetastoreCreateTableArgs() *ThriftHiveMetastoreCreateTableArgs {
	return &ThriftHiveMetastoreCreateTableArgs{}
}

var ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT *Table

func (p *ThriftHiveMetastoreCreateTableArgs) GetTbl() *Table {
	if !p.IsSetTbl() {
		return ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT
	}
	return p.Tbl
}
func (p *ThriftHiveMetastoreCreateTableArgs) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) readField1(iprot thrift.TProtocol) error {
	p.Tbl = &Table{}
	if err := p.Tbl.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err)
	}
	if err := p.Tbl.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1,omitempty"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2,omitempty"`
	O3 *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
	O4 *NoSuchObjectException  `thrift:"o4,4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableResult() *ThriftHiveMetastoreCreateTableResult {
	return &ThriftHiveMetastoreCreateTableResult{}
}

var ThriftHiveMetastoreCreateTableResult_O1_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreCreateTableResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreCreateTableResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreCreateTableResult_O2_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreCreateTableResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreCreateTableResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreCreateTableResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreCreateTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreCreateTableResult_O3_DEFAULT
	}
	return p.O3
}

var ThriftHiveMetastoreCreateTableResult_O4_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreCreateTableResult) GetO4() *NoSuchObjectException {
	if !p.IsSetO4() {
		return ThriftHiveMetastoreCreateTableResult_O4_DEFAULT
	}
	return p.O4
}
func (p *ThriftHiveMetastoreCreateTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) readField4(iprot thrift.TProtocol) error {
	p.O4 = &NoSuchObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Name
//  - DeleteData
type ThriftHiveMetastoreDropTableArgs struct {
	Dbname     string `thrift:"dbname,1" json:"dbname"`
	Name       string `thrift:"name,2" json:"name"`
	DeleteData bool   `thrift:"deleteData,3" json:"deleteData"`
}

func NewThriftHiveMetastoreDropTableArgs() *ThriftHiveMetastoreDropTableArgs {
	return &ThriftHiveMetastoreDropTableArgs{}
}

func (p *ThriftHiveMetastoreDropTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *ThriftHiveMetastoreDropTableArgs) GetName() string {
	return p.Name
}

func (p *ThriftHiveMetastoreDropTableArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *ThriftHiveMetastoreDropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deleteData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleteData (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deleteData: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropTableResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O3 *MetaException         `thrift:"o3,2" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropTableResult() *ThriftHiveMetastoreDropTableResult {
	return &ThriftHiveMetastoreDropTableResult{}
}

var ThriftHiveMetastoreDropTableResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropTableResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropTableResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropTableResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreDropTableResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreDropTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableResult) readField2(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropTableResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - Pattern
type ThriftHiveMetastoreGetTablesArgs struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	Pattern string `thrift:"pattern,2" json:"pattern"`
}

func NewThriftHiveMetastoreGetTablesArgs() *ThriftHiveMetastoreGetTablesArgs {
	return &ThriftHiveMetastoreGetTablesArgs{}
}

func (p *ThriftHiveMetastoreGetTablesArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetTablesArgs) GetPattern() string {
	return p.Pattern
}
func (p *ThriftHiveMetastoreGetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pattern: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pattern (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pattern: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetTablesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetTablesResult() *ThriftHiveMetastoreGetTablesResult {
	return &ThriftHiveMetastoreGetTablesResult{}
}

var ThriftHiveMetastoreGetTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTablesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetTablesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem153 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem153 = v
		}
		p.Success = append(p.Success, _elem153)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTablesResult(%+v)", *p)
}

// Attributes:
//  - DbName
type ThriftHiveMetastoreGetAllTablesArgs struct {
	DbName string `thrift:"db_name,1" json:"db_name"`
}

func NewThriftHiveMetastoreGetAllTablesArgs() *ThriftHiveMetastoreGetAllTablesArgs {
	return &ThriftHiveMetastoreGetAllTablesArgs{}
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) GetDbName() string {
	return p.DbName
}
func (p *ThriftHiveMetastoreGetAllTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllTablesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllTablesResult() *ThriftHiveMetastoreGetAllTablesResult {
	return &ThriftHiveMetastoreGetAllTablesResult{}
}

var ThriftHiveMetastoreGetAllTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllTablesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetAllTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem154 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem154 = v
		}
		p.Success = append(p.Success, _elem154)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
type ThriftHiveMetastoreGetTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
}

func NewThriftHiveMetastoreGetTableArgs() *ThriftHiveMetastoreGetTableArgs {
	return &ThriftHiveMetastoreGetTableArgs{}
}

func (p *ThriftHiveMetastoreGetTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableArgs) GetTblName() string {
	return p.TblName
}
func (p *ThriftHiveMetastoreGetTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTableResult struct {
	Success *Table                 `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTableResult() *ThriftHiveMetastoreGetTableResult {
	return &ThriftHiveMetastoreGetTableResult{}
}

var ThriftHiveMetastoreGetTableResult_Success_DEFAULT *Table

func (p *ThriftHiveMetastoreGetTableResult) GetSuccess() *Table {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetTableResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetTableResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetTableResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetTableResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetTableResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetTableResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Table{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
type ThriftHiveMetastoreAlterTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
	NewTbl_ *Table `thrift:"new_tbl,3" json:"new_tbl"`
}

func NewThriftHiveMetastoreAlterTableArgs() *ThriftHiveMetastoreAlterTableArgs {
	return &ThriftHiveMetastoreAlterTableArgs{}
}

func (p *ThriftHiveMetastoreAlterTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableArgs) GetTblName() string {
	return p.TblName
}

var ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT *Table

func (p *ThriftHiveMetastoreAlterTableArgs) GetNewTbl_() *Table {
	if !p.IsSetNewTbl_() {
		return ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT
	}
	return p.NewTbl_
}
func (p *ThriftHiveMetastoreAlterTableArgs) IsSetNewTbl_() bool {
	return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) readField3(iprot thrift.TProtocol) error {
	p.NewTbl_ = &Table{}
	if err := p.NewTbl_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err)
	}
	if err := p.NewTbl_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1,omitempty"`
	O2 *MetaException             `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableResult() *ThriftHiveMetastoreAlterTableResult {
	return &ThriftHiveMetastoreAlterTableResult{}
}

var ThriftHiveMetastoreAlterTableResult_O1_DEFAULT *InvalidOperationException

func (p *ThriftHiveMetastoreAlterTableResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAlterTableResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAlterTableResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAlterTableResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAlterTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreAlterTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterTableResult(%+v)", *p)
}

// Attributes:
//  - NewPart_
type ThriftHiveMetastoreAddPartitionArgs struct {
	NewPart_ *Partition `thrift:"new_part,1" json:"new_part"`
}

func NewThriftHiveMetastoreAddPartitionArgs() *ThriftHiveMetastoreAddPartitionArgs {
	return &ThriftHiveMetastoreAddPartitionArgs{}
}

var ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT *Partition

func (p *ThriftHiveMetastoreAddPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *ThriftHiveMetastoreAddPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) readField1(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_part: ", p), err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_part: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAddPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAddPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success,omitempty"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionResult() *ThriftHiveMetastoreAddPartitionResult {
	return &ThriftHiveMetastoreAddPartitionResult{}
}

var ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreAddPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreAddPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreAddPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAddPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAddPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreAppendPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewThriftHiveMetastoreAppendPartitionArgs() *ThriftHiveMetastoreAppendPartitionArgs {
	return &ThriftHiveMetastoreAppendPartitionArgs{}
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *ThriftHiveMetastoreAppendPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem155 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem155 = v
		}
		p.PartVals = append(p.PartVals, _elem155)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success,omitempty"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionResult() *ThriftHiveMetastoreAppendPartitionResult {
	return &ThriftHiveMetastoreAppendPartitionResult{}
}

var ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreAppendPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreAppendPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreAppendPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAppendPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreAppendPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewThriftHiveMetastoreAppendPartitionByNameArgs() *ThriftHiveMetastoreAppendPartitionByNameArgs {
	return &ThriftHiveMetastoreAppendPartitionByNameArgs{}
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionByNameResult struct {
	Success *Partition              `thrift:"success,0" json:"success,omitempty"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionByNameResult() *ThriftHiveMetastoreAppendPartitionByNameResult {
	return &ThriftHiveMetastoreAppendPartitionByNameResult{}
}

var ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
type ThriftHiveMetastoreDropPartitionArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	DeleteData bool     `thrift:"deleteData,4" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionArgs() *ThriftHiveMetastoreDropPartitionArgs {
	return &ThriftHiveMetastoreDropPartitionArgs{}
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem156 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem156 = v
		}
		p.PartVals = append(p.PartVals, _elem156)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionResult struct {
	Success *bool                  `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionResult() *ThriftHiveMetastoreDropPartitionResult {
	return &ThriftHiveMetastoreDropPartitionResult{}
}

var ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreDropPartitionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropPartitionResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
type ThriftHiveMetastoreDropPartitionByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName   string `thrift:"part_name,3" json:"part_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionByNameArgs() *ThriftHiveMetastoreDropPartitionByNameArgs {
	return &ThriftHiveMetastoreDropPartitionByNameArgs{}
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetPartName() string {
	return p.PartName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionByNameResult() *ThriftHiveMetastoreDropPartitionByNameResult {
	return &ThriftHiveMetastoreDropPartitionByNameResult{}
}

var ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreGetPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewThriftHiveMetastoreGetPartitionArgs() *ThriftHiveMetastoreGetPartitionArgs {
	return &ThriftHiveMetastoreGetPartitionArgs{}
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *ThriftHiveMetastoreGetPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem157 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem157 = v
		}
		p.PartVals = append(p.PartVals, _elem157)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionResult struct {
	Success *Partition             `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionResult() *ThriftHiveMetastoreGetPartitionResult {
	return &ThriftHiveMetastoreGetPartitionResult{}
}

var ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreGetPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthArgs() *ThriftHiveMetastoreGetPartitionWithAuthArgs {
	return &ThriftHiveMetastoreGetPartitionWithAuthArgs{}
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem158 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem158 = v
		}
		p.PartVals = append(p.PartVals, _elem158)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem159 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem159 = v
		}
		p.GroupNames = append(p.GroupNames, _elem159)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionWithAuthResult struct {
	Success *Partition             `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthResult() *ThriftHiveMetastoreGetPartitionWithAuthResult {
	return &ThriftHiveMetastoreGetPartitionWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreGetPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewThriftHiveMetastoreGetPartitionByNameArgs() *ThriftHiveMetastoreGetPartitionByNameArgs {
	return &ThriftHiveMetastoreGetPartitionByNameArgs{}
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionByNameResult struct {
	Success *Partition             `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionByNameResult() *ThriftHiveMetastoreGetPartitionByNameResult {
	return &ThriftHiveMetastoreGetPartitionByNameResult{}
}

var ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT *Partition

func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsArgs() *ThriftHiveMetastoreGetPartitionsArgs {
	return &ThriftHiveMetastoreGetPartitionsArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsResult struct {
	Success []*Partition           `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsResult() *ThriftHiveMetastoreGetPartitionsResult {
	return &ThriftHiveMetastoreGetPartitionsResult{}
}

var ThriftHiveMetastoreGetPartitionsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsResult) GetSuccess() []*Partition {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem160 := &Partition{}
		if err := _elem160.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem160), err)
		}
		p.Success = append(p.Success, _elem160)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts   int16    `thrift:"max_parts,3" json:"max_parts"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsWithAuthArgs {
	return &ThriftHiveMetastoreGetPartitionsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem161 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem161 = v
		}
		p.GroupNames = append(p.GroupNames, _elem161)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthResult() *ThriftHiveMetastoreGetPartitionsWithAuthResult {
	return &ThriftHiveMetastoreGetPartitionsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem162 := &Partition{}
		if err := _elem162.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem162), err)
		}
		p.Success = append(p.Success, _elem162)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesArgs() *ThriftHiveMetastoreGetPartitionNamesArgs {
	return &ThriftHiveMetastoreGetPartitionNamesArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetPartitionNamesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O2      *MetaException `thrift:"o2,1" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesResult() *ThriftHiveMetastoreGetPartitionNamesResult {
	return &ThriftHiveMetastoreGetPartitionNamesResult{}
}

var ThriftHiveMetastoreGetPartitionNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem163 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem163 = v
		}
		p.Success = append(p.Success, _elem163)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsPsArgs() *ThriftHiveMetastoreGetPartitionsPsArgs {
	return &ThriftHiveMetastoreGetPartitionsPsArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem164 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem164 = v
		}
		p.PartVals = append(p.PartVals, _elem164)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPartitionsPsResult struct {
	Success []*Partition   `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsResult() *ThriftHiveMetastoreGetPartitionsPsResult {
	return &ThriftHiveMetastoreGetPartitionsPsResult{}
}

var ThriftHiveMetastoreGetPartitionsPsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetSuccess() []*Partition {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem165 := &Partition{}
		if err := _elem165.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem165), err)
		}
		p.Success = append(p.Success, _elem165)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsPsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts   int16    `thrift:"max_parts,4" json:"max_parts"`
	UserName   string   `thrift:"user_name,5" json:"user_name"`
	GroupNames []string `thrift:"group_names,6" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs {
	return &ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem166 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem166 = v
		}
		p.PartVals = append(p.PartVals, _elem166)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem167 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem167 = v
		}
		p.GroupNames = append(p.GroupNames, _elem167)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:group_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:group_names: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthResult() *ThriftHiveMetastoreGetPartitionsPsWithAuthResult {
	return &ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem168 := &Partition{}
		if err := _elem168.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem168), err)
		}
		p.Success = append(p.Success, _elem168)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsArgs() *ThriftHiveMetastoreGetPartitionNamesPsArgs {
	return &ThriftHiveMetastoreGetPartitionNamesPsArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem169 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem169 = v
		}
		p.PartVals = append(p.PartVals, _elem169)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPartitionNamesPsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsResult() *ThriftHiveMetastoreGetPartitionNamesPsResult {
	return &ThriftHiveMetastoreGetPartitionNamesPsResult{}
}

var ThriftHiveMetastoreGetPartitionNamesPsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem170 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem170 = v
		}
		p.Success = append(p.Success, _elem170)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsByFilterArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	Filter   string `thrift:"filter,3" json:"filter"`
	MaxParts int16  `thrift:"max_parts,4" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterArgs() *ThriftHiveMetastoreGetPartitionsByFilterArgs {
	return &ThriftHiveMetastoreGetPartitionsByFilterArgs{
		MaxParts: -1,
	}
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetFilter() string {
	return p.Filter
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err)
	}
	if err := oprot.WriteString(string(p.Filter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filter (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByFilterResult struct {
	Success []*Partition           `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterResult() *ThriftHiveMetastoreGetPartitionsByFilterResult {
	return &ThriftHiveMetastoreGetPartitionsByFilterResult{}
}

var ThriftHiveMetastoreGetPartitionsByFilterResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetSuccess() []*Partition {
	return p.Success
}

var ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem171 := &Partition{}
		if err := _elem171.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem171), err)
		}
		p.Success = append(p.Success, _elem171)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewPart_
type ThriftHiveMetastoreAlterPartitionArgs struct {
	DbName   string     `thrift:"db_name,1" json:"db_name"`
	TblName  string     `thrift:"tbl_name,2" json:"tbl_name"`
	NewPart_ *Partition `thrift:"new_part,3" json:"new_part"`
}

func NewThriftHiveMetastoreAlterPartitionArgs() *ThriftHiveMetastoreAlterPartitionArgs {
	return &ThriftHiveMetastoreAlterPartitionArgs{}
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) GetTblName() string {
	return p.TblName
}

var ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT *Partition

func (p *ThriftHiveMetastoreAlterPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *ThriftHiveMetastoreAlterPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) readField3(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_part: ", p), err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_part: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1,omitempty"`
	O2 *MetaException             `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionResult() *ThriftHiveMetastoreAlterPartitionResult {
	return &ThriftHiveMetastoreAlterPartitionResult{}
}

var ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT *InvalidOperationException

func (p *ThriftHiveMetastoreAlterPartitionResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAlterPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DefaultValue
type ThriftHiveMetastoreGetConfigValueArgs struct {
	Name         string `thrift:"name,1" json:"name"`
	DefaultValue string `thrift:"defaultValue,2" json:"defaultValue"`
}

func NewThriftHiveMetastoreGetConfigValueArgs() *ThriftHiveMetastoreGetConfigValueArgs {
	return &ThriftHiveMetastoreGetConfigValueArgs{}
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) GetName() string {
	return p.Name
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) GetDefaultValue() string {
	return p.DefaultValue
}
func (p *ThriftHiveMetastoreGetConfigValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.defaultValue (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultValue: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetConfigValueResult struct {
	Success *string                     `thrift:"success,0" json:"success,omitempty"`
	O1      *ConfigValSecurityException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetConfigValueResult() *ThriftHiveMetastoreGetConfigValueResult {
	return &ThriftHiveMetastoreGetConfigValueResult{}
}

var ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT string

func (p *ThriftHiveMetastoreGetConfigValueResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT *ConfigValSecurityException

func (p *ThriftHiveMetastoreGetConfigValueResult) GetO1() *ConfigValSecurityException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &ConfigValSecurityException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToValsArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToValsArgs() *ThriftHiveMetastorePartitionNameToValsArgs {
	return &ThriftHiveMetastorePartitionNameToValsArgs{}
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) GetPartName() string {
	return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToValsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToValsResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToValsResult() *ThriftHiveMetastorePartitionNameToValsResult {
	return &ThriftHiveMetastorePartitionNameToValsResult{}
}

var ThriftHiveMetastorePartitionNameToValsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastorePartitionNameToValsResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastorePartitionNameToValsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem172 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem172 = v
		}
		p.Success = append(p.Success, _elem172)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToSpecArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToSpecArgs() *ThriftHiveMetastorePartitionNameToSpecArgs {
	return &ThriftHiveMetastorePartitionNameToSpecArgs{}
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) GetPartName() string {
	return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToSpecResult struct {
	Success map[string]string `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException    `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToSpecResult() *ThriftHiveMetastorePartitionNameToSpecResult {
	return &ThriftHiveMetastorePartitionNameToSpecResult{}
}

var ThriftHiveMetastorePartitionNameToSpecResult_Success_DEFAULT map[string]string

func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetSuccess() map[string]string {
	return p.Success
}

var ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key173 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key173 = v
		}
		var _val174 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val174 = v
		}
		p.Success[_key173] = _val174
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecResult(%+v)", *p)
}

// Attributes:
//  - NewIndex_
//  - IndexTable
type ThriftHiveMetastoreAddIndexArgs struct {
	NewIndex_  *Index `thrift:"new_index,1" json:"new_index"`
	IndexTable *Table `thrift:"index_table,2" json:"index_table"`
}

func NewThriftHiveMetastoreAddIndexArgs() *ThriftHiveMetastoreAddIndexArgs {
	return &ThriftHiveMetastoreAddIndexArgs{}
}

var ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT *Index

func (p *ThriftHiveMetastoreAddIndexArgs) GetNewIndex_() *Index {
	if !p.IsSetNewIndex_() {
		return ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT
	}
	return p.NewIndex_
}

var ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT *Table

func (p *ThriftHiveMetastoreAddIndexArgs) GetIndexTable() *Table {
	if !p.IsSetIndexTable() {
		return ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT
	}
	return p.IndexTable
}
func (p *ThriftHiveMetastoreAddIndexArgs) IsSetNewIndex_() bool {
	return p.NewIndex_ != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) IsSetIndexTable() bool {
	return p.IndexTable != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) readField1(iprot thrift.TProtocol) error {
	p.NewIndex_ = &Index{}
	if err := p.NewIndex_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIndex_), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) readField2(iprot thrift.TProtocol) error {
	p.IndexTable = &Table{}
	if err := p.IndexTable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexTable), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_index: ", p), err)
	}
	if err := p.NewIndex_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIndex_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_index: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_table: ", p), err)
	}
	if err := p.IndexTable.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexTable), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_table: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAddIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddIndexResult struct {
	Success *Index                  `thrift:"success,0" json:"success,omitempty"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2,omitempty"`
	O3      *MetaException          `thrift:"o3,3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddIndexResult() *ThriftHiveMetastoreAddIndexResult {
	return &ThriftHiveMetastoreAddIndexResult{}
}

var ThriftHiveMetastoreAddIndexResult_Success_DEFAULT *Index

func (p *ThriftHiveMetastoreAddIndexResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreAddIndexResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreAddIndexResult_O1_DEFAULT *InvalidObjectException

func (p *ThriftHiveMetastoreAddIndexResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAddIndexResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAddIndexResult_O2_DEFAULT *AlreadyExistsException

func (p *ThriftHiveMetastoreAddIndexResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAddIndexResult_O2_DEFAULT
	}
	return p.O2
}

var ThriftHiveMetastoreAddIndexResult_O3_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAddIndexResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return ThriftHiveMetastoreAddIndexResult_O3_DEFAULT
	}
	return p.O3
}
func (p *ThriftHiveMetastoreAddIndexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) readField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAddIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAddIndexResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
type ThriftHiveMetastoreAlterIndexArgs struct {
	Dbname      string `thrift:"dbname,1" json:"dbname"`
	BaseTblName string `thrift:"base_tbl_name,2" json:"base_tbl_name"`
	IdxName     string `thrift:"idx_name,3" json:"idx_name"`
	NewIdx_     *Index `thrift:"new_idx,4" json:"new_idx"`
}

func NewThriftHiveMetastoreAlterIndexArgs() *ThriftHiveMetastoreAlterIndexArgs {
	return &ThriftHiveMetastoreAlterIndexArgs{}
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetDbname() string {
	return p.Dbname
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetBaseTblName() string {
	return p.BaseTblName
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetIdxName() string {
	return p.IdxName
}

var ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT *Index

func (p *ThriftHiveMetastoreAlterIndexArgs) GetNewIdx_() *Index {
	if !p.IsSetNewIdx_() {
		return ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT
	}
	return p.NewIdx_
}
func (p *ThriftHiveMetastoreAlterIndexArgs) IsSetNewIdx_() bool {
	return p.NewIdx_ != nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BaseTblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IdxName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) readField4(iprot thrift.TProtocol) error {
	p.NewIdx_ = &Index{}
	if err := p.NewIdx_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIdx_), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:base_tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.BaseTblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.base_tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:base_tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idx_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:idx_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdxName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idx_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:idx_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_idx: ", p), err)
	}
	if err := p.NewIdx_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIdx_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_idx: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterIndexArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterIndexResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1,omitempty"`
	O2 *MetaException             `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterIndexResult() *ThriftHiveMetastoreAlterIndexResult {
	return &ThriftHiveMetastoreAlterIndexResult{}
}

var ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT *InvalidOperationException

func (p *ThriftHiveMetastoreAlterIndexResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreAlterIndexResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreAlterIndexResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
type ThriftHiveMetastoreDropIndexByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName  string `thrift:"index_name,3" json:"index_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewThriftHiveMetastoreDropIndexByNameArgs() *ThriftHiveMetastoreDropIndexByNameArgs {
	return &ThriftHiveMetastoreDropIndexByNameArgs{}
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *ThriftHiveMetastoreDropIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropIndexByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropIndexByNameResult() *ThriftHiveMetastoreDropIndexByNameResult {
	return &ThriftHiveMetastoreDropIndexByNameResult{}
}

var ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreDropIndexByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
type ThriftHiveMetastoreGetIndexByNameArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TblName   string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName string `thrift:"index_name,3" json:"index_name"`
}

func NewThriftHiveMetastoreGetIndexByNameArgs() *ThriftHiveMetastoreGetIndexByNameArgs {
	return &ThriftHiveMetastoreGetIndexByNameArgs{}
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}
func (p *ThriftHiveMetastoreGetIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexByNameResult struct {
	Success *Index                 `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexByNameResult() *ThriftHiveMetastoreGetIndexByNameResult {
	return &ThriftHiveMetastoreGetIndexByNameResult{}
}

var ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT *Index

func (p *ThriftHiveMetastoreGetIndexByNameResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexesArgs() *ThriftHiveMetastoreGetIndexesArgs {
	return &ThriftHiveMetastoreGetIndexesArgs{
		MaxIndexes: -1,
	}
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexesResult struct {
	Success []*Index               `thrift:"success,0" json:"success,omitempty"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1,omitempty"`
	O2      *MetaException         `thrift:"o2,2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexesResult() *ThriftHiveMetastoreGetIndexesResult {
	return &ThriftHiveMetastoreGetIndexesResult{}
}

var ThriftHiveMetastoreGetIndexesResult_Success_DEFAULT []*Index

func (p *ThriftHiveMetastoreGetIndexesResult) GetSuccess() []*Index {
	return p.Success
}

var ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT *NoSuchObjectException

func (p *ThriftHiveMetastoreGetIndexesResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT
	}
	return p.O1
}

var ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetIndexesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetIndexesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Index, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem175 := &Index{}
		if err := _elem175.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem175), err)
		}
		p.Success = append(p.Success, _elem175)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) readField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexNamesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexNamesArgs() *ThriftHiveMetastoreGetIndexNamesArgs {
	return &ThriftHiveMetastoreGetIndexNamesArgs{
		MaxIndexes: -1,
	}
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetIndexNamesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O2      *MetaException `thrift:"o2,1" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexNamesResult() *ThriftHiveMetastoreGetIndexNamesResult {
	return &ThriftHiveMetastoreGetIndexNamesResult{}
}

var ThriftHiveMetastoreGetIndexNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetIndexNamesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetIndexNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem176 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem176 = v
		}
		p.Success = append(p.Success, _elem176)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesResult(%+v)", *p)
}

// Attributes:
//  - Role
type ThriftHiveMetastoreCreateRoleArgs struct {
	Role *Role `thrift:"role,1" json:"role"`
}

func NewThriftHiveMetastoreCreateRoleArgs() *ThriftHiveMetastoreCreateRoleArgs {
	return &ThriftHiveMetastoreCreateRoleArgs{}
}

var ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT *Role

func (p *ThriftHiveMetastoreCreateRoleArgs) GetRole() *Role {
	if !p.IsSetRole() {
		return ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT
	}
	return p.Role
}
func (p *ThriftHiveMetastoreCreateRoleArgs) IsSetRole() bool {
	return p.Role != nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) readField1(iprot thrift.TProtocol) error {
	p.Role = &Role{}
	if err := p.Role.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Role), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err)
	}
	if err := p.Role.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Role), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreCreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreCreateRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCreateRoleResult() *ThriftHiveMetastoreCreateRoleResult {
	return &ThriftHiveMetastoreCreateRoleResult{}
}

var ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreCreateRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreCreateRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreCreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCreateRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
type ThriftHiveMetastoreDropRoleArgs struct {
	RoleName string `thrift:"role_name,1" json:"role_name"`
}

func NewThriftHiveMetastoreDropRoleArgs() *ThriftHiveMetastoreDropRoleArgs {
	return &ThriftHiveMetastoreDropRoleArgs{}
}

func (p *ThriftHiveMetastoreDropRoleArgs) GetRoleName() string {
	return p.RoleName
}
func (p *ThriftHiveMetastoreDropRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreDropRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreDropRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreDropRoleResult() *ThriftHiveMetastoreDropRoleResult {
	return &ThriftHiveMetastoreDropRoleResult{}
}

var ThriftHiveMetastoreDropRoleResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreDropRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreDropRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreDropRoleResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreDropRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreDropRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreDropRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreDropRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreDropRoleResult(%+v)", *p)
}

type ThriftHiveMetastoreGetRoleNamesArgs struct {
}

func NewThriftHiveMetastoreGetRoleNamesArgs() *ThriftHiveMetastoreGetRoleNamesArgs {
	return &ThriftHiveMetastoreGetRoleNamesArgs{}
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetRoleNamesResult struct {
	Success []string       `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetRoleNamesResult() *ThriftHiveMetastoreGetRoleNamesResult {
	return &ThriftHiveMetastoreGetRoleNamesResult{}
}

var ThriftHiveMetastoreGetRoleNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetRoleNamesResult) GetSuccess() []string {
	return p.Success
}

var ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetRoleNamesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem177 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem177 = v
		}
		p.Success = append(p.Success, _elem177)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
type ThriftHiveMetastoreGrantRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
	Grantor       string        `thrift:"grantor,4" json:"grantor"`
	GrantorType   PrincipalType `thrift:"grantorType,5" json:"grantorType"`
	GrantOption   bool          `thrift:"grant_option,6" json:"grant_option"`
}

func NewThriftHiveMetastoreGrantRoleArgs() *ThriftHiveMetastoreGrantRoleArgs {
	return &ThriftHiveMetastoreGrantRoleArgs{}
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantor() string {
	return p.Grantor
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantorType() PrincipalType {
	return p.GrantorType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantOption() bool {
	return p.GrantOption
}
func (p *ThriftHiveMetastoreGrantRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorType = temp
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grantor (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantor: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantorType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grantorType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantorType: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grant_option: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grant_option (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grant_option: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantRoleResult() *ThriftHiveMetastoreGrantRoleResult {
	return &ThriftHiveMetastoreGrantRoleResult{}
}

var ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreGrantRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGrantRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGrantRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreRevokeRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
}

func NewThriftHiveMetastoreRevokeRoleArgs() *ThriftHiveMetastoreRevokeRoleArgs {
	return &ThriftHiveMetastoreRevokeRoleArgs{}
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *ThriftHiveMetastoreRevokeRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokeRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokeRoleResult() *ThriftHiveMetastoreRevokeRoleResult {
	return &ThriftHiveMetastoreRevokeRoleResult{}
}

var ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreRevokeRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreRevokeRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreListRolesArgs struct {
	PrincipalName string        `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,2" json:"principal_type"`
}

func NewThriftHiveMetastoreListRolesArgs() *ThriftHiveMetastoreListRolesArgs {
	return &ThriftHiveMetastoreListRolesArgs{}
}

func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *ThriftHiveMetastoreListRolesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreListRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListRolesResult struct {
	Success []*Role        `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListRolesResult() *ThriftHiveMetastoreListRolesResult {
	return &ThriftHiveMetastoreListRolesResult{}
}

var ThriftHiveMetastoreListRolesResult_Success_DEFAULT []*Role

func (p *ThriftHiveMetastoreListRolesResult) GetSuccess() []*Role {
	return p.Success
}

var ThriftHiveMetastoreListRolesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreListRolesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreListRolesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreListRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreListRolesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreListRolesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Role, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem178 := &Role{}
		if err := _elem178.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem178), err)
		}
		p.Success = append(p.Success, _elem178)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreListRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreListRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreListRolesResult(%+v)", *p)
}

// Attributes:
//  - HiveObject
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPrivilegeSetArgs struct {
	HiveObject *HiveObjectRef `thrift:"hiveObject,1" json:"hiveObject"`
	UserName   string         `thrift:"user_name,2" json:"user_name"`
	GroupNames []string       `thrift:"group_names,3" json:"group_names"`
}

func NewThriftHiveMetastoreGetPrivilegeSetArgs() *ThriftHiveMetastoreGetPrivilegeSetArgs {
	return &ThriftHiveMetastoreGetPrivilegeSetArgs{}
}

var ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetUserName() string {
	return p.UserName
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) readField1(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem179 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem179 = v
		}
		p.GroupNames = append(p.GroupNames, _elem179)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hiveObject: ", p), err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hiveObject: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:group_names: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:group_names: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPrivilegeSetResult struct {
	Success *PrincipalPrivilegeSet `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPrivilegeSetResult() *ThriftHiveMetastoreGetPrivilegeSetResult {
	return &ThriftHiveMetastoreGetPrivilegeSetResult{}
}

var ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT *PrincipalPrivilegeSet

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetSuccess() *PrincipalPrivilegeSet {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT
	}
	return p.Success
}

var ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &PrincipalPrivilegeSet{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
type ThriftHiveMetastoreListPrivilegesArgs struct {
	PrincipalName string         `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType  `thrift:"principal_type,2" json:"principal_type"`
	HiveObject    *HiveObjectRef `thrift:"hiveObject,3" json:"hiveObject"`
}

func NewThriftHiveMetastoreListPrivilegesArgs() *ThriftHiveMetastoreListPrivilegesArgs {
	return &ThriftHiveMetastoreListPrivilegesArgs{}
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

var ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *ThriftHiveMetastoreListPrivilegesArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}
func (p *ThriftHiveMetastoreListPrivilegesArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) readField3(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hiveObject: ", p), err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hiveObject: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListPrivilegesResult struct {
	Success []*HiveObjectPrivilege `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException         `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListPrivilegesResult() *ThriftHiveMetastoreListPrivilegesResult {
	return &ThriftHiveMetastoreListPrivilegesResult{}
}

var ThriftHiveMetastoreListPrivilegesResult_Success_DEFAULT []*HiveObjectPrivilege

func (p *ThriftHiveMetastoreListPrivilegesResult) GetSuccess() []*HiveObjectPrivilege {
	return p.Success
}

var ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreListPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HiveObjectPrivilege, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem180 := &HiveObjectPrivilege{}
		if err := _elem180.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem180), err)
		}
		p.Success = append(p.Success, _elem180)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreGrantPrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewThriftHiveMetastoreGrantPrivilegesArgs() *ThriftHiveMetastoreGrantPrivilegesArgs {
	return &ThriftHiveMetastoreGrantPrivilegesArgs{}
}

var ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *ThriftHiveMetastoreGrantPrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantPrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantPrivilegesResult() *ThriftHiveMetastoreGrantPrivilegesResult {
	return &ThriftHiveMetastoreGrantPrivilegesResult{}
}

var ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreRevokePrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewThriftHiveMetastoreRevokePrivilegesArgs() *ThriftHiveMetastoreRevokePrivilegesArgs {
	return &ThriftHiveMetastoreRevokePrivilegesArgs{}
}

var ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *ThriftHiveMetastoreRevokePrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) readField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokePrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokePrivilegesResult() *ThriftHiveMetastoreRevokePrivilegesResult {
	return &ThriftHiveMetastoreRevokePrivilegesResult{}
}

var ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT bool

func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesResult(%+v)", *p)
}

// Attributes:
//  - RenewerKerberosPrincipalName
type ThriftHiveMetastoreGetDelegationTokenArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1" json:"renewer_kerberos_principal_name"`
}

func NewThriftHiveMetastoreGetDelegationTokenArgs() *ThriftHiveMetastoreGetDelegationTokenArgs {
	return &ThriftHiveMetastoreGetDelegationTokenArgs{}
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) GetRenewerKerberosPrincipalName() string {
	return p.RenewerKerberosPrincipalName
}
func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:renewer_kerberos_principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.renewer_kerberos_principal_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:renewer_kerberos_principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDelegationTokenResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDelegationTokenResult() *ThriftHiveMetastoreGetDelegationTokenResult {
	return &ThriftHiveMetastoreGetDelegationTokenResult{}
}

var ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT string

func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - RenewerKerberosPrincipalName
//  - TokenSignature
type ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1" json:"renewer_kerberos_principal_name"`
	TokenSignature               string `thrift:"token_signature,2" json:"token_signature"`
}

func NewThriftHiveMetastoreGetDelegationTokenWithSignatureArgs() *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs {
	return &ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs{}
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) GetRenewerKerberosPrincipalName() string {
	return p.RenewerKerberosPrincipalName
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) GetTokenSignature() string {
	return p.TokenSignature
}
func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenSignature = v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:renewer_kerberos_principal_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.renewer_kerberos_principal_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:renewer_kerberos_principal_name: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_signature", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token_signature: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenSignature)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token_signature (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token_signature: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenWithSignatureArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDelegationTokenWithSignatureResult struct {
	Success *string        `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDelegationTokenWithSignatureResult() *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult {
	return &ThriftHiveMetastoreGetDelegationTokenWithSignatureResult{}
}

var ThriftHiveMetastoreGetDelegationTokenWithSignatureResult_Success_DEFAULT string

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreGetDelegationTokenWithSignatureResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreGetDelegationTokenWithSignatureResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreGetDelegationTokenWithSignatureResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenWithSignatureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenWithSignatureResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreRenewDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewThriftHiveMetastoreRenewDelegationTokenArgs() *ThriftHiveMetastoreRenewDelegationTokenArgs {
	return &ThriftHiveMetastoreRenewDelegationTokenArgs{}
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRenewDelegationTokenResult struct {
	Success *int64         `thrift:"success,0" json:"success,omitempty"`
	O1      *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRenewDelegationTokenResult() *ThriftHiveMetastoreRenewDelegationTokenResult {
	return &ThriftHiveMetastoreRenewDelegationTokenResult{}
}

var ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT int64

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreCancelDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewThriftHiveMetastoreCancelDelegationTokenArgs() *ThriftHiveMetastoreCancelDelegationTokenArgs {
	return &ThriftHiveMetastoreCancelDelegationTokenArgs{}
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err)
	}
	return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreCancelDelegationTokenResult struct {
	O1 *MetaException `thrift:"o1,1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCancelDelegationTokenResult() *ThriftHiveMetastoreCancelDelegationTokenResult {
	return &ThriftHiveMetastoreCancelDelegationTokenResult{}
}

var ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT *MetaException

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ThriftHiveMetastoreCancelDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) readField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err)
		}
	}
	return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenResult(%+v)", *p)
}
